<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo相关问题解决</title>
      <link href="/2020/06/13/mehe/"/>
      <url>/2020/06/13/mehe/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo相关问题解决"><a href="#hexo相关问题解决" class="headerlink" title="hexo相关问题解决"></a>hexo相关问题解决</h1><p>​                                                                                                                                                                                                                                      </p><h2 id="博客插入图片（hexo使用markdown图片无法显示问题）"><a href="#博客插入图片（hexo使用markdown图片无法显示问题）" class="headerlink" title="博客插入图片（hexo使用markdown图片无法显示问题）"></a>博客插入图片（hexo使用markdown图片无法显示问题）</h2><p><code>hexo</code>默认无法自动处理文章插入本地图片，需要通过扩展插件支持</p><p>安装<a href="https://github.com/7ym0n/hexo-asset-image.git" target="_blank" rel="noopener">hexo-asset-image</a>，运行<code>hexo n "xxxx"</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了xxxx.md文件还有一个同名的文件夹，把图片放入该文件夹。</p><p>使用<code>![xxx](xxx/xxx.png)</code>直接插入图片即可。</p><p>问题</p><p>由于hexo3版本后对很多插件支持有问题，<a href="https://github.com/CodeFalling/hexo-asset-image.git" target="_blank" rel="noopener">hexo-asset-image</a>插件在处理<code>data.permalink</code>链接时出现路径错误，把年月去掉了，导致最后生成的路径为<code>%d/xxx/xxx</code>需要对其做兼容处理。通过判断当前版本是否等于<code>3</code>的版本做不同的路径分割。</p><p>在代码中加入：</p><pre><code>var version = String(hexo.version).split('.');</code></pre><p>修改<code>date.permalink</code>处理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>     <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span>     <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>重新生成静态文件即可正确显示。</p><p>可直接安装已经修改过得插件<code>npm install https://github.com/7ym0n/hexo-asset-image --sa</code>。</p><p>作者：菜鸡_快递到了<br>链接：<a href="https://www.jianshu.com/p/3db6a61d3782" target="_blank" rel="noopener">https://www.jianshu.com/p/3db6a61d3782</a><br>来源：简书</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc</title>
      <link href="/2020/06/13/HC/"/>
      <url>/2020/06/13/HC/</url>
      
        <content type="html"><![CDATA[<p>​                                                                                                                                                                                                                              </p><p>​                                                                                                                                                                                                                     </p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>标题属性  </p><h1></h1><h1><p></p><p>换行属性：<br></p><p>链接属性：<a href="">   </a></p><p>target :规定在何处打开连接</p><p>align：对齐方式</p><p>bgcolor：背景颜色                   </p><p>class：规定元素的类名</p><p>id：规定元素的唯一id</p><p>style：规定元素的样式</p><p>title：规定元素的额外信息</p><p><b>:定义粗体文本</b></p><p><big>:定义大号字</big></p><p><em> 定义着重文字</em></p><p><i>  定义斜体字</i></p><p><small>  定义小号字</small></p><p><strong>定义加重语气</strong></p><p><sub>定义下标字</sub></p><p><sup> 定义上标字</sup></p><p><ins>定义插入字</ins></p><p><del>定义删除字</del></p><p>html样式</p><p>1.标签<style>:样式定义</p><p>​           <link>:资源引用</p><p>2.属性：</p><p>​         rel=”stylesheet”:外部样式表</p><p>​         type=”text/css”:引入文档的类型</p><p>​        margin-left：边距</p><p>​      三种样式插入方法：</p><p>​            外部样式表：</p><p>​                  <link rel="stylesheet" type="text/css" href="mystyle.css">                                                                                                                                                                                 </p><p>​           内部样式表：</p><p>​                                <style type="text/css"></p><p>​                               body{background-color:red}</p><p>​                              p{margin-left:20px}</p><p>​                              </style></p><p>​             内联样式表：</p><p>​                             </p><p style="color:red">        </p><p>html链接</p><p>​           1.链接数据：</p><p>​                  文本链接</p><p>​                  图片链接</p><p>​            2.属性：</p><p>​                   href属性：指向另一个文件的链接</p><p>name属性：创建文档内的链接</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到tips<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>​         3.img标签属性</p><p>​                   alt：替换文本属性</p><p>​                  width：宽</p><p>​                  height：高</p><p>html表格</p><p>：    定义表格<table></table></p><p>：  定义表格标题</p><p>：       定义表格的表头</p><p>:             定义表格的行</p><p>：        定义表格的单元</p><p>：    定义表格的页眉</p><p>：      定义表格的主体</p><p>：      定义表格的页脚</p><p>：        定义表格的列属性   </p><p>html列表</p><p>：</p><ol>       有序列表</ol><p></p><p>：</p><ul>       无序列表</ul><p></p><p>：</p><li>        列表项</li><p></p><p>：</p><dl>        列表</dl><p></p><p>:</p><dt>          列表项</dt><p></p><p>：</p><dd>      描述</dd><p></p><p>1.无序列表</p><p>​             使用标签：</p><ul><li></li></ul><p></p><p>​              属性：disc，circle，square</p><p>2.有序列表：</p><p>​              使用标签：</p><ol><li></li></ol><p></p><p>​               属性：A  a   l  i  start</p><p>3.嵌套列表：</p><p>​                使用标签：</p><ol><ul><li></li></ul></ol><p></p><p>4.自定义列表</p><p>​                  使用标签：</p><dl><dt></dt><dd></dd></dl><p></p><p>html块</p><p>1.html块元素</p><p>​         块元素在显示时，通常会以新行开始</p><p>​         如：</p></h1><h1>,<p>,</p><ul></ul><p></p><p>2.HTML内联元素</p><p>​           内联元素通常不会以新行开始</p><p>​           如：<b>,<a>,<img></a></b></p><ol start="3"><li><p>HTML</p><div>元素</div><p></p><p>​     ：  </p><div>元素也被称为块元素，其主要是组合HTML元素的容器</div><p></p><p>4.HTML<span>元素</span></p><p>​           <span>元素是内联元素，可作为文的容器</span></p><p>HTML布局</p><p>1.使用</p><div> 元素布局</div><p></p><p>2.使用元素布局<table></table></p><p>clear：both清除浮动  p16</p><p>HTML表单</p><p>1.表单用于获取不同类型的用户输入</p><p>2.常用表单标签</p><p>：</p><form> 表单</form><p></p><p>: <input>   输入域</p><p>：<textarea>  文本域</textarea></p><p>：<label>        控制标签</label></p><p>：</p><fieldset>     定义域</fieldset><p></p><p>：<legend>      域的标题</legend></p><p>:<select>          选择列表</select></p><p>：<optgroup>   选项组</optgroup></p><p>:    <option>      下拉列表中的选项</option></p><p>：<button>          按钮</button></p><ol><li><p>框架标签（frame）</p><p>​           框架对于页面的设计有着很大的作用</p><p>2.框架集标签（）:</p><p>​     框架集标签定义如何将窗口分割为框架</p><p>​    每一个frameset定义一系列行或列</p><p>​     rows/cols的值规定了每行或每列占据屏幕的面积</p><p>3.常用标签：</p><p>​          noresize：固定框架大小</p><p>​          cols：列</p><p>​          rows：行</p></li></ol></li></ol><pre><code>   contentEditable属性：是否可编译  designMode属性：  hidden属性：隐藏域  spellcheck属性：拼写语法检查  tabindex属性：  article元素：内嵌元素  section元素：对文章内容进行分块  nav元素：传统导航条   侧边栏导航  ​               页面导航       翻页导航  aside元素：  time元素与微格式：  pubdate属性：  新增的非主题元素  header元素  footer元素  hgroup元素  address元素  1.CSS  1.选择器分组：  ​           h1,h2,h3,h4,h5,h6{color: red}  2.继承    body{  ​     color：green       }  3.派生选择器：  ​         通过依据元素在其位置的上下文关系来定义样式  4.id选择器：  ​         id选择器可以为标有id的HTML元素指定特定的样式  ​      id选择器以#来定义  ​      id+派生  类选择器  ​       类选择器以.来定义  ​           类—派生</code></pre><p>   属性选择器</p><p>   ​            [属性]{}</p><p>   ​            [属性=值]属性和值选择器</p><p>​        <img src="/2020/06/13/HC/1.PNG" alt=""></p><p>css背景</p><p><img src="/2020/06/13/HC/2.PNG" alt=""></p><p><img src="/2020/06/13/HC/3.PNG" alt=""></p><p>css文本</p><p><img src="/2020/06/13/HC/4.PNG" alt=""></p><p><img src="/2020/06/13/HC/5.PNG" alt=""></p><p>css字体</p><p><img src="/2020/06/13/HC/6.PNG" alt=""></p><p>css链接</p><p><img src="/2020/06/13/HC/7.PNG" alt=""></p><p><img src="/2020/06/13/HC/8.PNG" alt=""></p><p>css列表</p><p><img src="/2020/06/13/HC/9.PNG" alt=""></p><p>css表格</p><p>1.表格边框</p><p><img src="/2020/06/13/HC/10.PNG" alt=""></p><p>2.折叠边框</p><p><img src="/2020/06/13/HC/11.PNG" alt=""></p><p>3.表格宽高</p><p>4表格文本对齐</p><p>5表格内边距</p><p>6.表格颜色</p><p><img src="/2020/06/13/HC/12.PNG" alt=""></p><p>css轮廓</p><p><img src="/2020/06/13/HC/13.PNG" alt=""></p><p>css定位</p><p><img src="/2020/06/13/HC/15.PNG" alt=""></p><p><img src="/2020/06/13/HC/14.PNG" alt=""></p><p><img src="/2020/06/13/HC/16.PNG" alt=""></p><p>css浮动</p><p><img src="/2020/06/13/HC/17.PNG" alt=""></p><p>css盒子模型</p><p><img src="/2020/06/13/HC/18.PNG" alt="">))</p><p>css内边距</p><p><img src="/2020/06/13/HC/19.PNG" alt=""></p><p>css边框</p><p><img src="/2020/06/13/HC/HC%5C20.PNG" alt=""></p><p>css外边距</p><p><img src="/2020/06/13/HC/21.PNG" alt=""></p><p><img src="/2020/06/13/HC/22.PNG" alt=""></p><p><img src="/2020/06/13/HC/23.PNG" alt=""></p><p>css外边距合并</p><p><img src="/2020/06/13/HC/24.PNG" alt=""></p><p>盒子模型应用63</p><p>CSS常用操作–对齐</p><p><img src="/2020/06/13/HC/25.PNG" alt=""></p><p>CSS常用操作–尺寸</p><p><img src="/2020/06/13/HC/26.PNG" alt=""></p><p>CSS常用操作–分类</p><p><img src="/2020/06/13/HC/27.PNG" alt=""></p><p>CSS常用操作–导航栏</p><p><img src="/2020/06/13/HC/28.PNG" alt=""></p><p>CSS常用操作–图片操作</p><p><img src="/2020/06/13/HC/HC%5C29.PNG" alt=""></p><p><img src="/2020/06/13/HC/30.PNG" alt=""></p><p>选择器详解</p><p>元素选择器</p><p>选择器分组</p><p>1.例子：</p><p>​    h1，h2{}</p><p>2.通配符：</p><p>*{}</p><p>类选择器详解</p><p>1.类选择器允许以一种独立与文档元素的方式来指定样式</p><p>​       例如：.class{}</p><p>2.结合元素选择器：</p><p> 例如：a.class{}</p><p>3.多类选择器</p><p>例如：.class.class{}</p><p>ID选择器详解</p><p>1.例如：  #id{}</p><p>2.类选择器和id选择器区别：</p><p>   ID只能在文档中使用一次，而类可以多次使用</p><p>  ID选择器不能结合使用</p><p>当使用js的时候，需要用到id</p><p>属性选择器详解</p><ol><li>简单属性选择：</li></ol><p>​       例如：[tittle]{}</p><p>2.根据具体属性值选择：</p><p>​     除了选择拥有某些元素，还可以进一步缩小范围，只选择有特定属性值的元素</p><p>3.属性和属性值必须完全匹配</p><p>4.根据部分属性值选择</p><p>后代选择器：</p><p>​     后代选择器可以选择作为某元素的后代的元素</p><p>p   strong i{}</p><p>子元素选择器</p><p>  与后代选择器相比，子元素选择器只能作为某元素子元素的元素</p><p>p&gt;strong{}</p><p>相邻兄弟选择器</p><p>可选择紧邻在另一个元素后的元素，且二者有相同的父元素</p><p>​        例如：h1+p{}</p><p>css特效：</p><p>​     2D  3D转换</p><p> <img src="/2020/06/13/HC/31.PNG" alt=""></p><p>​    </p><p>​     过渡</p><p><img src="/2020/06/13/HC/32.PNG" alt=""></p><p>​     <img src="/2020/06/13/HC/33.PNG" alt=""></p><p>​     动画</p><p><img src="/2020/06/13/HC/34.PNG" alt=""></p><p>​     多列</p><p><img src="/2020/06/13/HC/35.PNG" alt=""></p><p><img src="/2020/06/13/HC/36.PNG" alt=""></p><p>瀑布流效果</p><p><img src="/2020/06/13/HC/37.PNG" alt=""></p></h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blogJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2020/06/13/MyBatis/"/>
      <url>/2020/06/13/MyBatis/</url>
      
        <content type="html"><![CDATA[<p>开发中                                                                                                                                                                                                                                </p><p>​                                                                                                                                                                                                                                             </p><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p> myBatis框架</p><p>共四天</p><p>第一天：myBatis入门</p><p>​               Mybatis的概述</p><p>​               Mybatis的环境搭建</p><p>​              MyBatis入门案例</p><p>​              自定义mybatis框架（主要目的是为了让大家了解mybatis中执行的细节）</p><p>第二天：myBatis基本使用</p><p>​               myBatis的表单crud操作</p><p>​               mybatis的参数和返回值</p><p>​               mybatis的dao编写</p><p>​              mybatis配置的细节</p><p>​                              几个标签的使用</p><p>第三天：mybatis的深入和多表</p><p>​                mybatis的连接池</p><p>​                mybatis的事务控制及设计方法</p><p>​                myBatis的多表查询</p><p>​                                    一对多（多对一）</p><p>​                                    多对多</p><p>第四天：mybatis的缓存和注解开发</p><p>​               mybatis中的一级缓存和二级缓存</p><p>​              mybatis的注解开发</p><p>​                                单标crud</p><p>​                               多表查询          </p><hr><p>1.什么是框架？</p><p>​            它是我们软件开发中的一套解决方案，不同的框架解决的是不同的问题。</p><p>​           使用框架的好处：</p><p>​                         框架封装了很多细节，使开发者可以使用极简的方式实现功能，大大提高开发效率。</p><p>2.三层架构：</p><p>​           表现层：</p><p>​                    是用于数据展示的</p><p>​           业务层：</p><p>​                    是处理业务需求</p><p>​           持久层：</p><p>​                    是和数据库交互的</p><ol start="3"><li><p>持久层技术解决方案</p><p>​          JDBC技术：</p><p>​                  Connection</p><p>​                  PreparedStatement</p><p>​                  ResultSet</p><p>​         Spring的JdbcTemplate：</p><p>​                 Spring中对jdbc的简单封装</p><p>​         Apache的DBUtils</p><p>​                 它和Spring的JdbcTemplate很像，也是对Jdbc的简易封装</p><p> 以上这些都不是框架 </p><p>​               JDBC是规范</p><p>​               Spring的JdbcTemplate的DBUtils都只是工具类</p></li></ol><p>4.mybatis的概述</p><p>​                mybatis是一个持久层框架，是java编写的</p><p>​                它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程</p><p>​                它使用了ORM思想实现了结果集的封装</p><p>​            ORM：</p><p>​                     object Relational Mappging 对象关系映射</p><p>​                      简单的说：</p><p>​                                    就是把数据库表和实体类及实体类的属性对应起来</p><p>​                                   让我们可以操作实体类就实现操作数据表。</p><p>​                                 user             User</p><p>​                                 id                   userId</p><p>​                                 user_name       userName </p><p>​         今天我们需要做到：</p><p>​                        实体类中的属性和数据库表的字段保持一致</p><p>​                                         user                   User</p><p>​                                         id                        id </p><p>​                                         user_name       user_name</p><p>5.mybatis的入门</p><p>​                 ，mybatis的环境搭建、</p><p>​                                         第一步：创建maven工程并导入坐标</p><p>​                                         第二部：创建实体类和dao接口</p><p>​                                          第三步：创建MyBatis的主配置文件</p><p>​                                                                     SqlMapConifig.xml</p><p>​                                          第四步：创建映射配置文件</p><p>​                                                                     IUserDao.xml</p><p>​                                          环境搭建的注意事项：</p><p>​                                                         第一个:创建IUserDao.xml和IUserDao.java时名称是为了和我们之前的知识保持一致</p><p>​                                                                    在mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper</p><p>​                                                                    所以：IUserDao和IUserMapper是一样的</p><p>​                                                            第二个：在idea中创建目录的时候，它和包是不一样的</p><p>​                                                                             包在创建时：com.itheima.dao它是三级结构</p><p>​                                                                 目录在创建的时候是一级目录：com.itheime.dao是一级目录</p><p>​                                                               第三个：mybatis的映射配置文件必须和dao接口包结构相同</p><p>​                                                                第四个：映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</p><p>​                                                                第五个：  映射配置问及那的操作配置，id属性的取值必须是dao接口的方法名      </p><p>​                                                                 当我们遵从了第三，四，五点之后，我们在开发中就无须再写dao实现类                </p><p>​                    mybatis的入门案例</p><p>​                                              第一步： 读取配置文件</p><p>​                                              第二步：创建SqlSessionFactory工厂</p><p>​                                              第三步：创建SqlSession</p><p>​                                              第四步：创建Dao接口的代理对象</p><p>​                                               第五步：  执行dao中的方法</p><p>​                                               第六步：释放资源</p><p>​                                               注意事项：</p><p>​                                                             不要忘记在映射配置中告知mybatis要封装到哪个实体中</p><p>​                                                          配置的方式：指定实体类的全限定类名</p><p>​                      mybatis基于注解的入门案例：</p><p>​                                                       把IUserDao.xml移除，在dao接口的方法上使用@Select注解，并且指定SQL语句</p><p>​                                                        同时需要在SqlMapConfig.xml中的mapper配置时，使用class属性指定dao接口的全限定类名</p><p>​          明确：我们在实际开发中，都是越简便越好，所以都采用不写dao实现类的方式，不管使用xml还是使用注解配置。</p><p>​      但是Mybatis它是支持写dao实现类的</p><p>6.自定义mybatis的分析：</p><p>​                 mybatis在使用代理dao的方式实现增删改查时做什么事呢？</p><p>​                 只有两件事：</p><p>​                                第一：创建代理对象</p><p>​                                第二：在代理对象中调用selectList</p><p>​               自定义mybatis能通过入门案例看到类</p><p>​                                class Resources</p><p>​                                class  SqlSessionFactoryBuilder</p><p>​                                interface  SqlSessionFactory</p><p>​                               interface   </p><p>传递pojo对象</p><p>Mybatis使用ognl表达式解析对象字段的值，#{}或者${}括号中的值为pojo属性名称</p><p>传递pojo包装对象</p><p>​         开发中通过pojo传递查询条件，查询条件是总和查询的条件，这时可以包装对象传递输入额参数，pojo类中包含pojo。</p><p>1.mybatis中的连接池以及事务控制</p><p>​             mybatis中的连接池使用及分析</p><p>​            mybatis中的事务控制的分析</p><p>2.mybatis基于xml配置的动态sql语句的使用</p><p>​             mappers配置文件中的几个标签：</p><p>​                         <if></if></p><p>​                          <where></where></p><p>​                           <foreach></foreach></p><p>​                             <sql></sql></p><p>3.mybatis中的多表操作</p><p>​                 一对多</p><p>​                一对一</p><p>​                 多对多</p><p>1.连接池：</p><p>​              我们在实际开发中都会使用</p><p>​              因为它可以减少我们获取链接所消耗的时间</p><p>2.mybatis中的连接池</p><p>​               mybatis连接池提供了3种方式的配置</p><p>​                      配置的位置：</p><p>​                                        主配置文件SqlMapConfig.xml中的dataSource标签，type属性就是采用何种连接池方式</p><p>​                      type属性的取值：</p><p>​                                POLLED  采用传统的javax.sql.DataSource规范中的连接池，mybatis’中有针对 规范的实现。</p><p>​                      UNPOOLED  采用传统的获取连接的方式，虽然也实现javax,sql.DataSource接口，但并没有池的思想</p><p>​                        JNDI    采用服务器技术提供的JNDI技术  来获取Datasource对象，不同的服务器所能拿到的DataSource是不一样的</p><p>​                        注意：如果不是web或者maven的war工程、是不能使用的，我们课程中使用的是tomcat服务器。采用的连接池就是dbcp连接池</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java练习题</title>
      <link href="/2020/06/13/javalianxi/"/>
      <url>/2020/06/13/javalianxi/</url>
      
        <content type="html"><![CDATA[<p>开发中                                                                                                                                                                                                                                </p><p>​                                                                                                                                                                                                                                             </p><h1 id="Java练习题"><a href="#Java练习题" class="headerlink" title="Java练习题"></a>Java练习题</h1><p>求1-10里面的所有质数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*             遍历1-10的所有质数         */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>打印10行的杨辉三角形</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明并初始化数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yanghui<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给数组的元素赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>yanghui<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            yanghui<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//给首行元素赋值</span>            yanghui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> yanghui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//给每行的非首末元素赋值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>yanghui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           yanghui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> yanghui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>yanghui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历二维数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>yanghui<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>yanghui<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>yanghui<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> //定义一个int型的数组，包含10个元素，分别赋一些随机整数<br>    //然后求出所有元素的最大值，最小值，平均数，总和<br>    //要求所有随机数都是两位数</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//算法的考察：求数值型数组中元素的最大值，最小值，平均数，总和</span>    <span class="token comment" spellcheck="true">//定义一个int型的数组，包含10个元素，分别赋一些随机整数</span>    <span class="token comment" spellcheck="true">//然后求出所有元素的最大值，最小值，平均数，总和</span>    <span class="token comment" spellcheck="true">//要求所有随机数都是两位数</span>    <span class="token comment" spellcheck="true">//[10,99]公式(10) Math、random（）*（99-10+1）+10</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//求数组元素的最大值</span>        <span class="token keyword">int</span> maxvalue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxvalue<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                maxvalue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值为："</span><span class="token operator">+</span>maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//求数组元素的最小值</span>        <span class="token keyword">int</span> minvalue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>minvalue<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minvalue<span class="token operator">></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                minvalue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值为："</span><span class="token operator">+</span>minvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//求数组元素的平均数</span>        <span class="token comment" spellcheck="true">//求数组元素的总和</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和："</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> avgvalue <span class="token operator">=</span> sum<span class="token operator">/</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数："</span><span class="token operator">+</span>avgvalue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java练习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc</title>
      <link href="/2020/06/13/jdbc/"/>
      <url>/2020/06/13/jdbc/</url>
      
        <content type="html"><![CDATA[<p>​                                                                                                                                                                                                                              </p><p>​                                                                                                                                                                                                                                             </p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>jdbc程序编写步骤：</p><p> <img src="/2020/06/13/jdbc/1.PNG" alt="jdbc编写八步骤">                                                                                       </p><p>​                                                                                                                                                                                                                                    </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        InputStream in <span class="token operator">=</span> connectiontest2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用PreparedStatement实现CRUD操作</p><p><img src="/2020/06/13/jdbc/2.PNG" alt="PreparedStatement"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span>    <span class="token comment" spellcheck="true">//如何避免出现sql注入：只要用 PreparedStatement(从Statement扩展而来) 取代 Statement</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SELECT username,password FROM t_user where username='1' or ' AND password = '=1 or '1' = '1'</span>        String sql <span class="token operator">=</span> <span class="token string">"SELECT username,password FROM t_user where username='"</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">"'&amp;&amp; password='"</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>        User returnuser <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>returnuser<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名不存在或者密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用Statement实现对数据表的查询操作</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span>   T <span class="token function">get</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T t <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.加载配置文件</span>            InputStream is <span class="token operator">=</span> StatementTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.读取配置信息</span>            String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String driver <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的元数据</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// //1. 获取列的名称</span>                    <span class="token comment" spellcheck="true">// String columnName = rsmd.getColumnName(i+1);</span>                    <span class="token comment" spellcheck="true">// 1. 获取列的别名</span>                    String columnName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 2. 根据列名获取对应数据表中的数据</span>                    Object columnVal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 3. 将数据表中得到的数据，封装进对象</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/2020/06/13/jdbc/3.PNG" alt="PreparedStatement实现CRUD"></p><p>图解查询的操作流程</p><p><img src="/2020/06/13/jdbc/4.PNG" alt="查询的操作流程"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blogJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/06/13/shijms/"/>
      <url>/2020/06/13/shijms/</url>
      
        <content type="html"><![CDATA[<p>开发中                                                                                                                                                                                                                                </p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>1.所谓的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象</p><p>2.如何实现？</p><p>//饿汉式</p><p>​      1.私有化类的构造器</p><p>​      2.内部创建类的对象</p><p>​      3.提供公共的静态方法，返回类的对象</p><p>​      4.要求此对象也必须声明为静态的</p><p>//懒汉式</p><pre><code>    1.   私有化类的构造器       2.   声明当前类的对象，没有初始化       3.   声明public，static的返回当前类的方法(判空)       4.   要求此对象也必须声明为静态的</code></pre><p>​      3.区分饿汉式和懒汉式</p><p>​            饿汉式：坏处：对象加载时间过长</p><p>​                             好处：饿汉式是线程安全的</p><p>​            懒汉式：好处：延迟对象创建 </p><p>​                             目前的坏处线程不安全                                                                                                                                                                                                                 </p><p><img src="/2020/06/13/shijms/19.PNG" alt="使用场景"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2020/06/13/javascript/"/>
      <url>/2020/06/13/javascript/</url>
      
        <content type="html"><![CDATA[<p>开发中                                                                                                                                                                                                                                </p><p>​                                                                                                                                                                                                                                             </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2020/06/13/suanfa/"/>
      <url>/2020/06/13/suanfa/</url>
      
        <content type="html"><![CDATA[<p>开发中                                                                                                                                                                                                                                </p><p>​                                                                                                                                                                                                                                             </p><p>1.数据结构和算法的内容介绍</p><p> 字符串匹配问题：</p><p>​       暴力匹配[简单，效率低]</p><p>​        kmp算法 《部分匹配表》</p><p>汉诺塔游戏：</p><p>​         分治算法</p><p>八皇后问题：</p><p>​       回溯算法</p><p>马踏棋盘算法：</p><p>​       图的优先遍历算法+贪心算法优化</p><p><img src="/2020/06/13/suanfa/1.PNG" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2020/06/13/java/"/>
      <url>/2020/06/13/java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>​                                                                                                                                                                                                                                                 </p><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="java学习导图"><a href="#java学习导图" class="headerlink" title="java学习导图"></a>java学习导图</h2><p><img src="/2020/06/13/java/1.jpg" alt="java"></p><h2 id="eclipse快捷键"><a href="#eclipse快捷键" class="headerlink" title="eclipse快捷键"></a>eclipse快捷键</h2><p><img src="/2020/06/13/java/2.jpg" alt="Eclipse快捷键"></p><h2 id="常见的Dos命令"><a href="#常见的Dos命令" class="headerlink" title="常见的Dos命令"></a>常见的Dos命令</h2><p><img src="/2020/06/13/java/3.jpg" alt="Dos命令"></p><h2 id="java语言的特点"><a href="#java语言的特点" class="headerlink" title="java语言的特点"></a>java语言的特点</h2><p>特性一：面向对象</p><p>​          <code>两个基本概念：类，对象</code></p><p>​          <code>三大特性：封装，继承，多态</code></p><p>特性二：健壮性</p><p>特性三：跨平台性</p><p>​          核心机制：jvm，垃圾收集机制</p><h2 id="java关键字和保留字"><a href="#java关键字和保留字" class="headerlink" title="java关键字和保留字"></a>java关键字和保留字</h2><p><img src="/2020/06/13/java/4.jpg" alt="关键字"></p><p><img src="/2020/06/13/java/5.jpg" alt="关键字"></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><img src="/2020/06/13/java/6.jpg" alt="标识符"></p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p><img src="/2020/06/13/java/7.jpg" alt="代码规范"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="/2020/06/13/java/8.jpg" alt="变量"></p><p>整数类型</p><p><img src="/2020/06/13/java/9.jpg" alt="整数类型"></p><p>浮点类型</p><p><img src="/2020/06/13/java/10.jpg" alt="浮点类型"></p><p>字符类型</p><p><img src="/2020/06/13/java/11.jpg" alt="字符类型"></p><p>类型转换</p><p><img src="/2020/06/13/java/12.jpg" alt="类型转换"></p><p>强制类型转换：自动类型提升运算的逆运算</p><p>1.需要使用强转符:()</p><p>2.注意点：强制类型转换，可能导致精度损失。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>1.数组（Array），是多个相同类型的数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式进行统一管理。</p><ol start="2"><li>数组常见概念：</li></ol><p>​             数组名</p><p>​             下标</p><p>​              元素</p><p>​              数组的长度</p><p>3.数组特点：1）数组是有序排列的</p><p>​                      2）  数组属于引用数据类型的变量，数组的元素既可以是基本数据类型，也可以是引用数据类型。</p><p>​                      3）创建数组对象会在内存中开辟出一块连续的空间</p><p>​                       4）数组的长度一旦确定就不能修改</p><p>4.一维数组的使用：</p><p>​            1.一维数组的声明和初始化</p><p>​            2.如何调用数组的指定位置的元素</p><p>​            3.如何获取数组的长度</p><p>​             4.如何遍历数组</p><p>​             5.数组元素的默认初始化</p><p>​             6.数组内存的解析</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化：</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态初始化：</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组一旦初始化完成。其长度就确定了。</span><span class="token comment" spellcheck="true">//如何调用数组的指定位置的元素</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//charAt(0) 张</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如何获取数组的长度</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如何遍历数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数组元素的默认初始化</span>    <span class="token comment" spellcheck="true">//    >数组元素是整型：0</span>    <span class="token comment" spellcheck="true">//    >数组元素是浮点型 ：0.0</span>    <span class="token comment" spellcheck="true">//    >数组元素是char型:0或‘\u0000’,而非’0‘</span>    <span class="token comment" spellcheck="true">//    >数组元素是boolean型：false</span>    <span class="token comment" spellcheck="true">//    >数组元素是引用数据类型：null</span></code></pre><p>数组中涉及的常见算法</p><p>1.数组元素的赋值（杨辉三角，回形数等）</p><p>2.求数值型数组中元素的最大值，最小值，平均数，总和</p><p>3.数组的赋值，反转，查找（线性查找，二分法查找）</p><p>4.数组元素的排序算法</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>一。java面向对象学习的三条主线</p><p>1.java类及类的成员：属性，方法，构造器，代码块，内部类</p><p>2.面向对象的三大特性：封装，继承，多态（抽象性）</p><p>3.其他关键字：this，super，static，static，final，avstract，interface，package，import</p><p>类和对象是面向对象的核心概念</p><p>类是指一类事物的描述，是抽象的，概念上的定义</p><p>对象是实际存在的该事物的每个个体，因而也被称为实例</p><p>面向对象的重点是类的设计</p><p>设计类：就是设计类的成员。</p><p>​             属性=成员变量=field = 域，字段</p><p>​             方法=成员=函数=method</p><p>对象的内存分析</p><p><img src="/2020/06/13/java/15.PNG" alt="对象的内存分析"></p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>类的结构之三：构造器（或构造方法，constructor的使用）</p><p>​      一.构造器的作用</p><p>​                1. 创建对象</p><p>​                 2.初始化对象的属性</p><p>​                 </p><p>​      二,说明</p><p>​       1.如果没有显示定义类的构造器的话，则系统默认提供一个空参构造器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建的对象：new+构造器</span>Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        2.定义构造器的格式，权限修饰符 类名（形参列表）{ }</p><p>​        </p><pre class=" language-java"><code class="language-java">String name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span><span class="token punctuation">{</span>         name<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span>Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.一个类中定义多个构造器，彼此构成重载；</p><p>4.一旦我们显示定义了类的构造器，系统不再提供默认的空参构造器；</p><p>5.一个类中至少有一个构造器</p><h2 id="关键字Static"><a href="#关键字Static" class="headerlink" title="关键字Static"></a>关键字Static</h2><p>1.static：静态的</p><p>2.static可以用来修饰：属性，方法，代码块，内部类</p><p>3.使用static修饰属性：静态变量（或类变量）</p><p>​                                     属性：按是否使用static修饰，又分为：静态属性vs非静态属性（实例变量）</p><p>​                            实例变量：我们创建的类的多个对象，每个对象都独立拥有一套类中的非静态属性，当修改其中的一个对象的非静态属性时，不会导致其他对象中同样的属性值的修改；</p><p>​                              静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p><p>​                  static修饰属性的其他说明：</p><p>​                                   静态变量随着类的加载而加载</p><p>​                                静态变量       非静态变量 </p><p>​                      类               Y                     N</p><p>​                    对象           Y                     Y</p><p>​                                   静态变量的加载早于对象的创建</p><p>​                                   由于类只加载一次，则静态变量在内存中也只会存在一份，存在方法区的静态域中</p><p>​         静态属性举例：System.out  Math.PI</p><p>类变量实例变量内存解析</p><p><img src="/2020/06/13/java/14.PNG" alt="类变量vs实例变量"></p><p>4.使用static修饰方法：静态方法</p><ol><li>随着类的加载而加载，可以通过类.静态方法来调 用</li></ol><ol start="2"><li><p>​              静态方法       非静态方法</p><p>类               Y                     N</p><p>对象           Y                     Y</p><p>3.静态方法中，只能调用静态的方法和属性</p><p>  非静态方法中： 既可以调用非静态方法和属性，依然可以调用静态的方法和属性</p><pre><code>     3.                          static注意点：                                 ​       在静态方法内，不能使用this关键字 ，super关键字</code></pre></li></ol><p>​             关于静态方法和静态属性没打架都从生命周期的角度去理解</p><p>6.开发中，如何确定一个属性是否需要声明为static的？</p><p>​                属性是可以被多个对象所共享的，不会随着对象的不同而不同</p><p>​                    类中的常量通常声明为static</p><p>​          开发中，如何确定一个方法是否需要声明为static的？</p><p>​                 操作静态属性的方法，通常设置为static的</p><p>​                工具类中的方法，习惯声明为static的，包括Math，Arrays，Collections。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>​       1.代码块的作用：用来初始化类，对象</p><p>​        2.代码块如果有修饰的话，只能使用static</p><p>​        3.分类：静态代码块vs非静态代码块</p><p>​        4.静态代码块</p><p>​                  内部可以有输出语句</p><p>​                  随着类的加载而执行，而且只执行一次</p><p>​                  作用：初始化类的信息</p><p>​                  如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</p><p>​                   静态代码块的执行要优先于非静态代码块的执行</p><p>​                     静态代码块只能调用静态的属性，静态的方法，不能调用非静态的结构</p><p>​        5。非静态代码块</p><p>​                   内部可以有输出语句 </p><p>​                   随着对象的创建而执行</p><p>​                  每创建一次，就执行一次非静态代码块</p><p>​                  如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</p><p>​                   非静态代码块内可以调用静态的属性，静态的方法，或非静态的属性，非静态的方法</p><p>​                  作用：可以在创建对象时，对对象的属性进行初始化</p><p>对属性可以赋值的位置：</p><p>1.默认初始化</p><p>2.显式初始化 /5.在代码块中赋值</p><p>3.构造器中初始化</p><p>4.有了对象以后，可以通过“对象.属性”或“对象.方法”进行赋值</p><h2 id="关键字final"><a href="#关键字final" class="headerlink" title="关键字final"></a>关键字final</h2><p>final：最终的</p><p>1.final可以用来修饰的结构，类，方法，变量</p><p>2.final用来修饰一个类：此类不能被其他类所继承。</p><p>​                                        比如：String类，System类，StringBuffer类</p><p>3.final用来修饰方法，表名此方法不能被重写</p><p>​                         比如：Object类中的getClass（）；</p><p>4.final用来修饰变量：此时的变量被称为一个常量</p><p>​                                 final修饰属性，可以考虑赋值的位置有：显式初始化，代码块中初始化，构造器中初始化</p><p>​                                     final修饰局部变量</p><p>​                                                    尤其是使用final修饰形参时，表名此形参是一个常量值，当我们调用此方法时，给形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值</p><p>static final  用来修饰属性：全局常量 </p><p>​                    用来修饰方法：</p><h2 id="枚举类与注解"><a href="#枚举类与注解" class="headerlink" title="枚举类与注解"></a>枚举类与注解</h2><p>1.枚举类的使用</p><p>2.注解的使用</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Error：java虚拟机无法解决的严重问题。如：JVM系统内部错误，资源耗尽等严重情况，比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。</p><p>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理，例如：</p><p>​      空指针访问异常</p><p>​      试图读取不存在的文件</p><p>​      网络连接中断</p><p>​      数组角标越界 </p><p>一.异常体系结构</p><p>   java.lang.throwable</p><p>​                — java.lang,Error:一般不编写针对性的代 码进行 处理</p><p>​               —java.lang.Exception:可以进行异常处理</p><p>​                     ——编译时异常（checked）受检异常</p><p>​                                    ——-IOException</p><p>​                                    ——-FileNotFoundException</p><p>​                                    ——-ClassNotFoundException</p><p>​                    ——–运行时异常（unchecked）非受检异常 </p><p>​                                     ——-NullPointerException</p><p>​                                     ——–ArrayIndexOutofBoundsException</p><p>​                              ——–ClassCastException</p><p>​                              ——–NumberFormatException</p><p>​                              ——–InputMismatchException</p><p>面试题：常见的异常有哪些？举例说明    </p><p>​      异常处理方式：</p><p>​                    方式一：try-catch-finally</p><p>​                    方式二：throws+异常类型</p><p>​     异常的处理：抓抛模型</p><p>​             过程一：”抛”：程序在执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象，并将此异常抛出</p><p>​                    一旦抛出对象以后，其后的代码就不再执行</p><p>​              关于异常对象的产生：1.系统自动生成的异常对象</p><p>​                     2.手动的生成的一个异常对象，并抛出（throw）</p><p>​                过程二：”抓”，可以理解为一场场的处           理方式：1.try-catch-finally 2throws</p><p>二：try-catch-finally的使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>​      <span class="token comment" spellcheck="true">//可能出现异常的代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span>（异常类型<span class="token number">1</span> 变量名）<span class="token punctuation">{</span>​            <span class="token comment" spellcheck="true">//处理异常的方式1</span><span class="token punctuation">}</span><span class="token keyword">catch</span>（异常类型<span class="token number">1</span> 变量名）<span class="token punctuation">{</span>​            <span class="token comment" spellcheck="true">//处理异常的方式1</span><span class="token punctuation">}</span><span class="token keyword">catch</span>（异常类型<span class="token number">1</span> 变量名）<span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//处理异常的方式1</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一定会处理的异常</span><span class="token punctuation">}</span></code></pre><p>说明：</p><p>​       1.finally是可选的。</p><p>​       2.使用try将可能出现的异常代码块包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</p><p>​        3.一旦try中的异常对象匹配到某一个catch时，就进入到catch中进行异常处理  一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码</p><p>​         4.catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下没有关系</p><p>​          5.常用异常的处理方式：1.String getMessage（）2.printStackTrace</p><p>​              6.在try结构中声明的变量，在出了try结构以后，就不能再调用</p><p>​               7.try  catch  finally可以相互嵌套</p><p>​          体会：使用try-catch-finally处理编译异常，使得程序编译时就不再报错，但运行时仍可能报错，相当于我们使用try-catch将一个编译时可能出现的异常，延迟到运行时出现</p><p>​          体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally，针对编译时异常，我们说一定要考虑异常的处理</p><p>​        try-catch-finally中finally的使用</p><pre><code>                   1. finally是可选的                      2.   finally中声明的是一定会执行的代码，即使catch中由出现异常了， try中有reurn语句，catch中有retun语句                      3. 像数据库连接，输入输出流，网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放，此时的资源释放，就需要声明在finally中</code></pre><p>异常处理的方式二：throws+异常类型</p><p>​           1.”throws”+异常类型写在方法的声明处，指明此方法执行时，可能会抛出的异常类型，一旦当方法执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出，异常代码的后续代码。就不再执行！</p><p>​          2.体会：try  catch  finally：真正的将异常给处理掉了。   throws的方式只是将异常抛给了方法的调用者，并没有真正将异常处理掉</p><p>​             方法重写的规则之一：</p><p>​           子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><p>​          3.开发中如何选择使用try  catch  finally  还是throws？</p><p>​             3.1   如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，如果子类中重写的方法中，必须使用try  catch  finally方式处理</p><p>​             3.2  执行的方法a中先后又调用了另外的几个方法，这几个方法是递进关系的，我们建议这几个方法使用throws方式进行处理，而执行的按方法a可以考虑使用try-catch-finally方式进行处理</p><p>​          <img src="/2020/06/13/java/22.PNG" alt=""></p><p>​              如何自定义异常类？</p><p>​            1.继承于现有的异常结构：RuntimeException，Exception</p><p>​                           2.提供全局常量：serialVersionUID</p><p>​                  <img src="/2020/06/13/java/23.PNG" alt=""></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>基本概念</p><p><img src="/2020/06/13/java/24.PNG" alt=""></p><p><img src="/2020/06/13/java/26.PNG" alt=""></p><p>多线程的创建，方式一：继承于Thread类</p><p>​         1.创建一个继承于Thread’类的子类</p><p>​         2.重写Thread类的run（）–&gt;此线程执行的操作声明在run方法中</p><p>​          3.创建Thead类的子类对象</p><p>​           4.通过此对象调用start（）</p><p>​          问题一：我们不能通过直接调用run（）的方式启动线程</p><p>​          问题二：不可以让已经start()线程去执行，会报IlllegalThreadstateException错误</p><p>​          测试Thread中的常用的方法</p><p>​                1.start（）：启动当前线程：调用当前线程的run()</p><p>​                  2.run():通常需要重写Thread类中的此方法，  将创建的线程要执行的操作声明在此方法中</p><p>​                     3.currentThread():静态方法，返回执行当前代码的线程</p><p>​                  4.getname：获取当前线程的名字</p><p>​                  5.setname：设置当前线程的名字</p><p>​                  6.yield（）：释放当前线程 </p><p>​                   7.join（）：在线程a中调用线程b的join（），此时a线程就处于阻塞状态，直到线程a完全执行完成后，线程a才结束阻塞状态</p><p>​                    8.sleep：休眠</p><p>​                     9.isAlive：判断线程是否存活</p><p>线程优先级</p><p>​     <img src="/2020/06/13/java/28.PNG" alt=""></p><p>创建多线程的方式2：实现Runnnable接口</p><p>​          1.创建一个实现了Runnable接口的类</p><p>​           2.实现类去实现Runnable中的抽象方法：run（）</p><p>​            3.创建实现类的对象</p><p>​            4.将此对象作为参数传递到构造器中 ，创建Thread类的对象</p><p>​              5.通过Thread类的对象调用start（）1.启动线程 2.调用当前线程的run—-》调用了Runnable类型的target的run方法</p><p>​          比较创建线程的两种方式：</p><p>​     开发中：优先选择实现Runnable接口的方式</p><p>​       原因：1.实现的方式没有类的单继承局限性</p><p>​                   2.实现的方式更适合来处理多个线程共享数据的情况</p><p>​          联系：public  class  Thread implements  Runnable</p><p>​               相同点：两种方式都需要重写run（），将线程执行的逻辑声明在run（）中</p><p>​                 线程的生命周期</p><p><img src="/2020/06/13/java/29.PNG" alt=""></p><p><img src="/2020/06/13/java/30.PNG" alt=""></p><p>线程的同步</p><p>在java中，我们通过同步机制，来解决线程的安全问题</p><p>方式一：同步代码块</p><p>​     synchronized（同步监视器）{</p><p>​         //需要被同步的代码块</p><p>}</p><p>说明：1.操作共享数据的代码，即为需要被同步的代码—-》不能包含代码多了也不能包含代码少了</p><p>2.共享数据：多个数据共同操作的变量，比如：ticket就是共享数据</p><p>3.同步监视器：俗称：锁。任何一个类的对象，都可以充当锁</p><p>​          补充：在实现Runnable接口创建多线程的范式中，我们可以考虑使用this充当同步监视器</p><p>​            要求：多个线程必须公用同一把锁</p><p>说明:在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器</p><p>方拾贰：同步方法</p><p>​      如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的</p><p>5.同步的方式，解决了线程的安全问题。—–好处</p><p>​          操作同步代码块时，只能有一个线程参与，其他线程等待，相当于是一个单线程的过程，效率低。</p><p><img src="/2020/06/13/java/32.PNG" alt=""></p><p>关于同步方法的总结：</p><p>​         1.同步方法仍然涉及到同步监视器，知识不需要我们显示的声明</p><p>​       2.非静态同步代码块，同步监视器是：this</p><p>​          静态的同步方法，同步监视器是：当前类本身</p><p>​         单例模式懒汉式线程安全问题</p><p>​       <img src="/2020/06/13/java/33.PNG" alt=""></p><p>​      线程死锁的问题</p><p>​                <img src="/2020/06/13/java/44.PNG" alt=""></p><p>我们使用同步时，要避免出现死锁</p><p>解决线程安全问题的方式三:lock锁  jdk5新增</p><p>1.面试题：synchronized与lock的异同？</p><p>​          相同：二者都可以解决线程安全问题</p><p>​           不同：synchronized机制在执行完相应的同步代码块以后，自动的释放同步监视器，Lock需要手动的启动同步（lock（）），同时结束的时候也要手动实现（unlock（））</p><p><img src="/2020/06/13/java/45.PNG" alt=""></p><p>面试题：如何解决线程安全问题？有几种方式</p><p>线程通信：</p><p><img src="/2020/06/13/java/46.PNG" alt=""></p><p>wait(),notify(),notifyAll()三个方法时定义在java.lang.Object类中</p><p><img src="/2020/06/13/java/47.PNG" alt=""></p><p><img src="/2020/06/13/java/48.PNG" alt=""></p><p>jdk5.0新增的线程的创建方式</p><p><img src="/2020/06/13/java/49.PNG" alt=""></p><p><img src="/2020/06/13/java/50.PNG" alt=""></p><h2 id="java常用类"><a href="#java常用类" class="headerlink" title="java常用类"></a>java常用类</h2><p>字符串相关的类：String</p><p>String:字符串，使用一对””引起来表示。<br>1.String声明为final的，不可被继承<br>2.String实现了Serializable接口：表示字符串是支持序列化的。<br>        实现了Comparable接口：表示String可以比较大小<br>3.String内部定义了final char[] value用于存储字符串数据<br>4.String:代表不可变的字符序列。简称：不可变性。<br>    体现：1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</p><p>​               2.当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>5.通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。<br>6.字符串常量池中是不会存储相同内容的字符串的。</p><p>String的实例化方式：<br>     方式一：通过字面量定义的方式<br>     方式二：通过new + 构造器的方式</p><p> 面试题：String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？<br>        两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p><p>结论：<br>1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>2.只要其中有一个是变量，结果就在堆中。<br>3.如果拼接的结果调用intern()方法，返回值就在常量池中</p><p>String 与 byte[]之间的转换<br>编码：String –&gt; byte[]:调用String的getBytes()<br>解码：byte[] –&gt; String:调用String的构造器</p><p>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)<br>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂）</p><p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p><p>String 与 char[]之间的转换</p><p>String –&gt; char[]:调用String的toCharArray()<br>char[] –&gt; String:调用String的构造器</p><p>String 与基本数据类型、包装类之间的转换。</p><p>String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)<br>基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx)</p><pre><code>替换：String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。匹配:boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。切片：String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 trueint indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索注：indexOf和lastIndexOf方法如果未找到都是返回-1int length()：返回字符串的长度： return value.lengthchar charAt(int index)： 返回某索引处的字符return value[index]boolean isEmpty()：判断是否是空字符串：return value.length == 0String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写String trim()：返回字符串的副本，忽略前导空白和尾部空白boolean equals(Object obj)：比较字符串的内容是否相同boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”int compareTo(String anotherString)：比较两个字符串的大小String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</code></pre><pre><code>StringBuffer的常用方法：StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接StringBuffer delete(int start,int end)：删除指定位置的内容StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为strStringBuffer insert(int offset, xxx)：在指定位置插入xxxStringBuffer reverse() ：把当前字符序列逆转public int indexOf(String str)public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串public int length()public char charAt(int n )public void setCharAt(int n ,char ch)        总结：        增：append(xxx)        删：delete(int start,int end)        改：setCharAt(int n ,char ch) / replace(int start, int end, String str)        查：charAt(int n )        插：insert(int offset, xxx)        长度：length();        *遍历：for() + charAt() / toString()         String、StringBuffer、StringBuilder三者的异同？    String:不可变的字符序列；底层使用char[]存储    StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储    StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储    源码分析：    String str = new String();//char[] value = new char[0];    String str1 = new String("abc");//char[] value = new char[]{'a','b','c'};    StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。    System.out.println(sb1.length());//    sb1.append('a');//value[0] = 'a';    sb1.append('b');//value[1] = 'b';    StringBuffer sb2 = new StringBuffer("abc");//char[] value = new char["abc".length() + 16];    //问题1. System.out.println(sb2.length());//3    //问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。             默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。            指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</code></pre><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date类       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date类<span class="token number">1</span><span class="token punctuation">.</span>两个构造器的使用    <span class="token operator">></span>构造器一：<span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：创建一个对应当前时间的Date对象    <span class="token operator">></span>构造器二：创建指定毫秒数的Date对象<span class="token number">2</span><span class="token punctuation">.</span>两个方法的使用    <span class="token operator">></span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>显示当前的年、月、日、时、分、秒    <span class="token operator">></span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取当前Date对象对应的毫秒数。（时间戳）<span class="token number">3</span><span class="token punctuation">.</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date对应着数据库中的日期类型的变量    <span class="token operator">></span>如何实例化    <span class="token operator">></span>如何将java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date对象转换为java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date对象       <span class="token comment" spellcheck="true">//情况一：</span><span class="token comment" spellcheck="true">//        Date date4 = new java.sql.Date(2343243242323L);</span><span class="token comment" spellcheck="true">//        java.sql.Date date5 = (java.sql.Date) date4;</span>        <span class="token comment" spellcheck="true">//情况二：</span>        Date date6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>date6<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><pre class=" language-java"><code class="language-java">一、集合框架的概述<span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。<span class="token operator">*</span>  说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（<span class="token punctuation">.</span>txt<span class="token punctuation">,</span><span class="token punctuation">.</span>jpg<span class="token punctuation">,</span><span class="token punctuation">.</span>avi，数据库中）<span class="token operator">*</span><span class="token operator">*</span> <span class="token number">2.1</span> 数组在存储多个数据方面的特点：<span class="token operator">*</span>      <span class="token operator">></span> 一旦初始化以后，其长度就确定了。<span class="token operator">*</span>      <span class="token operator">></span> 数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。<span class="token operator">*</span>       比如：String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">;</span><span class="token operator">*</span> <span class="token number">2.2</span> 数组在存储多个数据方面的缺点：<span class="token operator">*</span>      <span class="token operator">></span> 一旦初始化以后，其长度就不可修改。<span class="token operator">*</span>      <span class="token operator">></span> 数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。<span class="token operator">*</span>      <span class="token operator">></span> 获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用<span class="token operator">*</span>      <span class="token operator">></span> 数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。<span class="token operator">*</span><span class="token operator">*</span> 二、集合框架<span class="token operator">*</span>      <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>Collection接口：单列集合，用来存储一个一个的对象<span class="token operator">*</span>          <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>List接口：存储有序的、可重复的数据。  <span class="token operator">--</span><span class="token operator">></span>“动态”数组<span class="token operator">*</span>              <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>ArrayList、LinkedList、Vector<span class="token operator">*</span><span class="token operator">*</span>          <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>Set接口：存储无序的、不可重复的数据   <span class="token operator">--</span><span class="token operator">></span>高中讲的“集合”<span class="token operator">*</span>              <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>HashSet、LinkedHashSet、TreeSet<span class="token operator">*</span><span class="token operator">*</span>      <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>Map接口：双列集合，用来存储一对<span class="token punctuation">(</span>key <span class="token operator">-</span> value<span class="token punctuation">)</span>一对的数据   <span class="token operator">--</span><span class="token operator">></span>高中函数：y <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span>              <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>HashMap、LinkedHashMap、TreeMap、Hashtable、Properties<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 三、Collection接口中的方法的使用     <span class="token operator">*</span> Collection接口中声明的方法的测试 <span class="token operator">*</span> <span class="token operator">*</span> 结论： <span class="token operator">*</span> 向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span></code></pre><pre><code>* 集合元素的遍历操作，使用迭代器Iterator接口* 1.内部的方法：hasNext() 和  next()* 2.集合对象每次调用iterator()方法都得到一个全新的迭代器对象，* 默认游标都在集合的第一个元素之前。* 3.内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</code></pre><pre><code>1. List接口框架**    |----Collection接口：单列集合，用来存储一个一个的对象*          |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组,替换原有的数组*              |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储*              |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储*              |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储***   2. ArrayList的源码分析：*   2.1 jdk 7情况下*      ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData*      list.add(123);//elementData[0] = new Integer(123);*      ...*      list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。*      默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。**      结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)**   2.2 jdk 8中ArrayList的变化：*      ArrayList list = new ArrayList();//底层Object[] elementData初始化为{}.并没有创建长度为10的数组**      list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]*      ...*      后续的添加和扩容操作与jdk 7 无异。*   2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象*            的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。**  3. LinkedList的源码分析：*      LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null*      list.add(123);//将123封装到Node中，创建了Node对象。**      其中，Node定义为：体现了LinkedList的双向链表的说法*      private static class Node&lt;E&gt; {            E item;            Node&lt;E&gt; next;            Node&lt;E&gt; prev;            Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) {            this.item = element;            this.next = next;            this.prev = prev;            }        }**   4. Vector的源码分析：jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。*      在扩容方面，默认扩容为原来的数组长度的2倍。**  面试题：ArrayList、LinkedList、Vector三者的异同？*  同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据*  不同：见上****   5. List接口中的常用方法void add(int index, Object ele):在index位置插入ele元素boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来Object get(int index):获取指定index位置的元素int indexOf(Object obj):返回obj在集合中首次出现的位置int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置Object remove(int index):移除指定index位置的元素，并返回此元素Object set(int index, Object ele):设置指定index位置的元素为eleList subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合总结：常用方法增：add(Object obj)删：remove(int index) / remove(Object obj)改：set(int index, Object ele)查：get(int index)插：add(int index, Object ele)长度：size()遍历：① Iterator迭代器方式     ② 增强for循环     ③ 普通的循环*</code></pre><pre><code> 1. Set接口的框架：** |----Collection接口：单列集合，用来存储一个一个的对象*          |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”*              |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值*                  |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历*                                      对于频繁的遍历操作，LinkedHashSet效率高于HashSet.*              |----TreeSet：可以按照添加对象的指定属性，进行排序。***  1. Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。**  2. 要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()*     要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码*      重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。*一、Set：存储无序的、不可重复的数据    以HashSet为例说明：    1. 无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。    2. 不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。    二、添加元素的过程：以HashSet为例：        我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，        此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置），判断        数组此位置上是否已经有元素：            如果此位置上没有其他元素，则元素a添加成功。 ---&gt;情况1            如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：                如果hash值不相同，则元素a添加成功。---&gt;情况2                如果hash值相同，进而需要调用元素a所在类的equals()方法：                       equals()返回true,元素a添加失败                       equals()返回false,则元素a添加成功。---&gt;情况2        对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。        jdk 7 :元素a放到数组中，指向原来的元素。        jdk 8 :原来的元素在数组中，指向元素a        总结：七上八下        HashSet底层：数组+链表的结构。    1.向TreeSet中添加的数据，要求是相同类的对象。    2.两种排序方式：自然排序（实现Comparable接口） 和 定制排序（Comparator）    3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().    4.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</code></pre><pre><code>Collections:操作Collection、Map的工具类*** 面试题：Collection 和 Collections的区别？reverse(List)：反转 List 中元素的顺序shuffle(List)：对 List 集合元素进行随机排序sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素Object min(Collection)Object min(Collection，Comparator)int frequency(Collection，Object)：返回指定集合中指定元素的出现次数void copy(List dest,List src)：将src中的内容复制到dest中boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值  Collections 类中提供了多个 synchronizedXxx() 方法，        该方法可使将指定集合包装成线程同步的集合，从而可以解决        多线程并发访问集合时的线程安全问题</code></pre><pre><code>一、Map的实现类的结构：*  |----Map:双列数据，存储key-value对的数据   ---类似于高中的函数：y = f(x)*         |----HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value*              |----LinkedHashMap:保证在遍历map元素时，可以按照添加的顺序实现遍历。*                      原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。*                      对于频繁的遍历操作，此类执行效率高于HashMap。*         |----TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序*                      底层使用红黑树*         |----Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value*              |----Properties:常用来处理配置文件。key和value都是String类型***      HashMap的底层：数组+链表  （jdk7及之前）*                    数组+链表+红黑树 （jdk 8）***  面试题：*  1. HashMap的底层实现原理？*  2. HashMap 和 Hashtable的异同？*  3. CurrentHashMap 与 Hashtable的异同？（暂时不讲）**  二、Map结构的理解：*    Map中的key:无序的、不可重复的，使用Set存储所有的key  ---&gt; key所在的类要重写equals()和hashCode() （以HashMap为例）*    Map中的value:无序的、可重复的，使用Collection存储所有的value ---&gt;value所在的类要重写equals()*    一个键值对：key-value构成了一个Entry对象。*    Map中的entry:无序的、不可重复的，使用Set存储所有的entry**  三、HashMap的底层实现原理？以jdk7为例说明：*      HashMap map = new HashMap():*      在实例化以后，底层创建了长度是16的一维数组Entry[] table。*      ...可能已经执行过多次put...*      map.put(key1,value1):*      首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。*      如果此位置上的数据为空，此时的key1-value1添加成功。 ----情况1*      如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据*      的哈希值：*              如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。----情况2*              如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：*                      如果equals()返回false:此时key1-value1添加成功。----情况3*                      如果equals()返回true:使用value1替换value2。**       补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。**      在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。**      jdk8 相较于jdk7在底层实现方面的不同：*      1. new HashMap():底层没有创建一个长度为16的数组*      2. jdk 8底层的数组是：Node[],而非Entry[]*      3. 首次调用put()方法时，底层创建长度为16的数组*      4. jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。*         4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）          4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。**      DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16*      DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75*      threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12*      TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8*      MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64**  四、LinkedHashMap的底层实现原理（了解）*      源码中：*      static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; {            Entry&lt;K,V&gt; before, after;//能够记录添加的元素的先后顺序            Entry(int hash, K key, V value, Node&lt;K,V&gt; next) {               super(hash, key, value, next);            }        }***   五、Map中定义的方法：添加、删除、修改操作：Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中void putAll(Map m):将m中的所有key-value对存放到当前map中Object remove(Object key)：移除指定key的key-value对，并返回valuevoid clear()：清空当前map中的所有数据元素查询的操作：Object get(Object key)：获取指定key对应的valueboolean containsKey(Object key)：是否包含指定的keyboolean containsValue(Object value)：是否包含指定的valueint size()：返回map中key-value对的个数boolean isEmpty()：判断当前map是否为空boolean equals(Object obj)：判断当前map和参数对象obj是否相等元视图操作的方法：Set keySet()：返回所有key构成的Set集合Collection values()：返回所有value构成的Collection集合Set entrySet()：返回所有key-value对构成的Set集合*总结：常用方法：* 添加：put(Object key,Object value)* 删除：remove(Object key)* 修改：put(Object key,Object value)* 查询：get(Object key)* 长度：size()* 遍历：keySet() / values() / entrySet()元视图操作的方法： Set keySet()：返回所有key构成的Set集合 Collection values()：返回所有value构成的Collection集合 Set entrySet()：返回所有key-value对构成的Set集合 添加、删除、修改操作： Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中 void putAll(Map m):将m中的所有key-value对存放到当前map中 Object remove(Object key)：移除指定key的key-value对，并返回value void clear()：清空当前map中的所有数据 //Properties:常用来处理配置文件。key和value都是String类型</code></pre><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><pre><code>泛型的使用* 1.jdk 5.0新增的特性** 2.在集合中使用泛型：*  总结：*  ① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。*  ② 在实例化集合类时，可以指明具体的泛型类型*  ③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。*    比如：add(E e)  ---&gt;实例化以后：add(Integer e)*  ④ 注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换*  ⑤ 如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。** 3.如何自定义泛型结构：泛型类、泛型接口；泛型方法。见 GenericTest1.java*</code></pre><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><pre><code> Files工具类的使用：操作文件或目录的工具类 * @author shkstart * @create 2019 下午 2:44 */public class FilesTest {   @Test   public void test1() throws IOException{      Path path1 = Paths.get("d:\\nio", "hello.txt");      Path path2 = Paths.get("atguigu.txt");//    Path copy(Path src, Path dest, CopyOption … how) : 文件的复制      //要想复制成功，要求path1对应的物理上的文件存在。path1对应的文件没有要求。//    Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING);//    Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr) : 创建一个目录      //要想执行成功，要求path对应的物理上的文件目录不存在。一旦存在，抛出异常。      Path path3 = Paths.get("d:\\nio\\nio1");//    Files.createDirectory(path3);//    Path createFile(Path path, FileAttribute&lt;?&gt; … arr) : 创建一个文件      //要想执行成功，要求path对应的物理上的文件不存在。一旦存在，抛出异常。      Path path4 = Paths.get("d:\\nio\\hi.txt");//    Files.createFile(path4);//    void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错//    Files.delete(path4);//    void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除.如果不存在，正常执行结束      Files.deleteIfExists(path3);//    Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置      //要想执行成功，src对应的物理上的文件需要存在，dest对应的文件没有要求。//    Files.move(path1, path2, StandardCopyOption.ATOMIC_MOVE);//    long size(Path path) : 返回 path 指定文件的大小      long size = Files.size(path2);      System.out.println(size);   }   @Test   public void test2() throws IOException{      Path path1 = Paths.get("d:\\nio", "hello.txt");      Path path2 = Paths.get("atguigu.txt");//    boolean exists(Path path, LinkOption … opts) : 判断文件是否存在      System.out.println(Files.exists(path2, LinkOption.NOFOLLOW_LINKS));//    boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录      //不要求此path对应的物理文件存在。      System.out.println(Files.isDirectory(path1, LinkOption.NOFOLLOW_LINKS));//    boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件//    boolean isHidden(Path path) : 判断是否是隐藏文件      //要求此path对应的物理上的文件需要存在。才可判断是否隐藏。否则，抛异常。//    System.out.println(Files.isHidden(path1));//    boolean isReadable(Path path) : 判断文件是否可读      System.out.println(Files.isReadable(path1));//    boolean isWritable(Path path) : 判断文件是否可写      System.out.println(Files.isWritable(path1));//    boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在      System.out.println(Files.notExists(path1, LinkOption.NOFOLLOW_LINKS));   }   /**    * StandardOpenOption.READ:表示对应的Channel是可读的。    * StandardOpenOption.WRITE：表示对应的Channel是可写的。    * StandardOpenOption.CREATE：如果要写出的文件不存在，则创建。如果存在，忽略    * StandardOpenOption.CREATE_NEW：如果要写出的文件不存在，则创建。如果存在，抛异常    *    * @author shkstart 邮箱：shkstart@126.com    * @throws IOException    */   @Test   public void test3() throws IOException{      Path path1 = Paths.get("d:\\nio", "hello.txt");//    InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象      InputStream inputStream = Files.newInputStream(path1, StandardOpenOption.READ);//    OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象      OutputStream outputStream = Files.newOutputStream(path1, StandardOpenOption.WRITE,StandardOpenOption.CREATE);//    SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式。      SeekableByteChannel channel = Files.newByteChannel(path1, StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);//    DirectoryStream&lt;Path&gt;  newDirectoryStream(Path path) : 打开 path 指定的目录      Path path2 = Paths.get("e:\\teach");      DirectoryStream&lt;Path&gt; directoryStream = Files.newDirectoryStream(path2);      Iterator&lt;Path&gt; iterator = directoryStream.iterator();      while(iterator.hasNext()){         System.out.println(iterator.next());      }   }</code></pre><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>IO流的原理及流的分类</p><p>​               按操作数据单位不同分为：字节流（8bit），字符流（16bit）</p><p>​               按数据流向不同：输入流，输出流</p><p>​               按流的角色的不同分为：节点流，处理流</p><p>​         抽象基类                字节流               字符流        </p><p>​            输入流              InputStream              Reader</p><p>​            输出流              OutputStream           Writer</p><p>java的io流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。</p><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p><p><img src="/2020/06/13/java/20.PNG" alt=""></p><p><img src="/2020/06/13/java/21.PNG" alt=""></p><p>流的体系结构</p><p>抽象基类                                    节点流（或文件流）                                      缓冲流（处理流的一种）</p><p>Inputstream                              FileInputStream （read(byte[].buffer)）                       BufferedInputStream      （read(byte[] buffer)）</p><p>outputstream                            FileOutputStream (write byte[] abfer,0,len)                    BufferedOutputStream     (write byte[] abfer,0,len)  </p><p>Reader                                     FileReader  （read(char[].buffer)）                       BufferedReader          （read(char[].buffer)）readline()</p><p>Writer                                      FileWriter       (write char[] abfer,0,len)                          BufferedWriter                (write char[] abfer,0,len)  </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数据读入  read()理解  返回读入一个一个字符。如果达到文件末尾  返回-1</span><span class="token comment" spellcheck="true">//异常处理  为了保证流资源一定可以执行关闭操作，流必须执行关闭处理try-catch-finally处理</span> <span class="token comment" spellcheck="true">//读入的文件一定要存在，否则会报FilenotfoundException</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qianheng<span class="token punctuation">.</span>基础<span class="token punctuation">.</span>IO流<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * * @Auther: 钱恒 * @Date: 2020/07/07/15:13 * @Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ioTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相较于当前工程</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"java基础\\hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Author qianheng     * @Description //从内存中读入数据到控制台     * @Date 19:50 2020/7/7     * @Param []     * @return void     **/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">iopractise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化file对象</span>        FileReader fileReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相较于当前module下的</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//提供具体的流</span>            fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据读入  read()理解  返回读入一个一个字符。如果达到文件末尾  返回-1</span>           <span class="token comment" spellcheck="true">//异常处理  为了保证流资源一定可以执行关闭操作，流必须执行关闭处理try-catch-finally处理</span>            <span class="token comment" spellcheck="true">//读入的文件一定要存在，否则会报FilenotfoundException</span><span class="token comment" spellcheck="true">//        int read = fileReader.read();</span><span class="token comment" spellcheck="true">//        while (read!=-1){</span><span class="token comment" spellcheck="true">//            System.out.print((char)read);</span><span class="token comment" spellcheck="true">//            read = fileReader.read();</span><span class="token comment" spellcheck="true">//        }</span>            <span class="token comment" spellcheck="true">//语法上针对以的修改</span>            <span class="token keyword">int</span> data<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">=</span>fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//流的关闭</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileReader<span class="token operator">!=</span>null<span class="token punctuation">)</span>                fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对read（）升级操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileReader11</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        FileReader fr <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.File类的实例化</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.FileReader流的实例化</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.读入的操作</span>            <span class="token comment" spellcheck="true">//read(char[] cbuffer):返回每次读入cbuffer数组中的字符的个数，如果达到文件末尾返回-1</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//方式一：</span><span class="token comment" spellcheck="true">//                for (int i = 0; i &lt; len; i++) {</span><span class="token comment" spellcheck="true">//                    System.out.print(cbuffer[i]);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                }</span>                <span class="token comment" spellcheck="true">//方式二</span>                <span class="token comment" spellcheck="true">//错误的写法对应着方式一的错误写法</span><span class="token comment" spellcheck="true">//                String str = new String(cbuffer);</span><span class="token comment" spellcheck="true">//                System.out.println(str);</span>                <span class="token comment" spellcheck="true">//正确的写法</span>              String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//        4.资源关闭</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fr<span class="token operator">!=</span>null<span class="token punctuation">)</span>                fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Author qianheng     * @Description //从内存中写出数据到硬盘的文件里     * 说明：     * 输出操作，对应的file可以不存在的，并不报异常     *  file对应的硬盘中的文件如果不存在，如果不存在，在输出的过程中，会自动创建此文件     *   file对应的硬盘中的文件如果存在：     *            如果流使用的构造器是：、FilEriter（file，false）/FilEriter（file） 原有文件进行覆盖     *            如果流使用的构造器是：、FilEriter（file，true） 不会对原有文件进行修改 而是对原有文件文件进行追加     *     * @Date 19:51 2020/7/7     * @Param []     * @return void     **/</span>        <span class="token annotation punctuation">@Test</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            FileWriter fw<span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//1.提供File类的对象，指明写出到的文件</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.提供FileWriter的对象，用于数据的写出</span>                fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3.写出的操作</span>                fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"I have a dream!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"you need to have a dream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//4.流资源关闭</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fw<span class="token operator">!=</span>null<span class="token punctuation">)</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileReaderFileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>           FileReader fileReader <span class="token operator">=</span> null<span class="token punctuation">;</span>           FileWriter fileWriter <span class="token operator">=</span> null<span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//1.创建File类的对象，指明读入和写出的文件</span>               File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//2.创建输入流和输出流的对象</span>               fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>               fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"hello2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//3.数据的读入和写出操作</span>               <span class="token comment" spellcheck="true">//注意：不能用字符流来处理图片等字节数据</span>               fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"I have a dream!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"you need to have a dream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//4.关闭资源</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>fileReader<span class="token operator">!=</span>null<span class="token punctuation">)</span>                   fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>fileWriter<span class="token operator">!=</span>null<span class="token punctuation">)</span>                   fileWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>转换流</p><pre><code>处理流之二：转换流的使用* 1.转换流：属于字符流*   InputStreamReader：将一个字节的输入流转换为字符的输入流*   OutputStreamWriter：将一个字符的输出流转换为字节的输出流** 2.作用：提供字节流与字符流之间的转换** 3. 解码：字节、字节数组  ---&gt;字符数组、字符串*    编码：字符数组、字符串 ---&gt; 字节、字节数组*** 4.字符集*ASCII：美国标准信息交换码。   用一个字节的7位可以表示。ISO8859-1：拉丁码表。欧洲码表   用一个字节的8位表示。GB2312：中国的中文编码表。最多两个字节编码所有字符GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</code></pre><pre><code>1.标准的输入、输出流1.1System.in:标准的输入流，默认从键盘输入System.out:标准的输出流，默认从控制台输出1.2System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。1.3练习：从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。方法一：使用Scanner实现，调用next()返回一个字符串方法二：使用System.in实现。System.in  ---&gt;  转换流 ---&gt; BufferedReader的readLine()</code></pre><pre><code>2. 打印流：PrintStream 和PrintWriter2.1 提供了一系列重载的print() 和 println()2.2 练习：</code></pre><p>3.数据流</p><pre><code>* RandomAccessFile的使用* 1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口* 2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流** 3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。*   如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖）** 4. 可以通过相关的操作，实现RandomAccessFile“插入”数据的效果</code></pre><pre><code> 对象流的使用* 1.ObjectInputStream 和 ObjectOutputStream* 2.作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。** 3.要想一个java对象是可序列化的，需要满足相应的要求。见Person.java** 4.序列化机制：* 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种* 二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。* 当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。*</code></pre><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p><img src="/2020/06/13/java/52.PNG" alt=""></p><p>一、网络编程中有两个主要的问题：</p><ul><li><p>1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</p></li><li><p>2.找到主机后如何可靠高效地进行数据传输</p></li><li><p>二、网络编程中的两个要素：</p></li><li><p>1.对应问题一：IP和端口号</p></li><li><p>2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）</p></li></ul><ul><li><p>三、通信要素一：IP和端口号</p></li><li><ol><li>IP:唯一的标识 Internet 上的计算机（通信实体）</li></ol></li><li><ol start="2"><li>在Java中使用InetAddress类代表IP</li></ol></li><li><ol start="3"><li>IP分类：IPv4 和 IPv6 ; 万维网 和 局域网</li></ol></li><li><ol start="4"><li>域名:   <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>   <a href="http://www.mi.com" target="_blank" rel="noopener">www.mi.com</a>  <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a>  <a href="http://www.jd.com" target="_blank" rel="noopener">www.jd.com</a></li></ol></li><li><p><a href="http://www.vip.com" target="_blank" rel="noopener">www.vip.com</a></p></li><li><ol start="5"><li>本地回路地址：127.0.0.1 对应着：localhost</li></ol></li><li><ol start="6"><li>如何实例化InetAddress:两个方法：getByName(String host) 、 getLocalHost()</li></ol></li><li><p>两个常用方法：getHostName() / getHostAddress()</p></li><li><ol start="7"><li>端口号：正在计算机上运行的进程。</li></ol></li><li><p>要求：不同的进程有不同的端口号</p></li><li><p>范围：被规定为一个 16 位的整数 0~65535。</p></li><li><ol start="8"><li><p>端口号与IP地址的组合得出一个网络套接字：Socket</p><p><img src="/2020/06/13/java/53.PNG" alt=""></p></li></ol></li></ul><p><img src="/2020/06/13/java/54.PNG" alt=""></p><p><img src="/2020/06/13/java/55.PNG" alt=""></p><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p><img src="/2020/06/13/java/16.PNG" alt="反射"></p><p><img src="/2020/06/13/java/18.PNG" alt=""></p><p>通过反射：可以调用Person类的私有结构的</p><p>关于java.lang.Class类的理解</p><p>1.类的加载过程：</p><p>程序经过javac.exe命令以后，会生成一个或多个字节码文件，接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就成为类的加载，加载到内存的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc</title>
      <link href="/2020/06/13/ksfjdbc/"/>
      <url>/2020/06/13/ksfjdbc/</url>
      
        <content type="html"><![CDATA[<p>​                                                                                                                                                                                                                              </p><p>​                                                                                                                                                                                                                     </p><p>​                             </p><h1 id="JDBC核心技术"><a href="#JDBC核心技术" class="headerlink" title="JDBC核心技术"></a>JDBC核心技术</h1><hr><h2 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img src="/2020/06/13/ksfjdbc/1566741430592.png" alt="1566741430592"> </p></li></ul><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O/R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src="/2020/06/13/ksfjdbc/1555575760234.png" alt="1555575760234"></p><hr><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src="/2020/06/13/ksfjdbc/1555575981203.png" alt="1555575981203"></p><hr><ul><li>总结如下：</li></ul><p><img src="/2020/06/13/ksfjdbc/1566741692804.png" alt="1566741692804"></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。                                                                ————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src="/2020/06/13/ksfjdbc/1565969323908.png" alt="1565969323908"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img src="/2020/06/13/ksfjdbc/1555576157618.png" alt="1555576157618"></p><p><img src="/2020/06/13/ksfjdbc/1555576170074.png" alt="1555576170074"></p><ul><li><p>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</p><p><img src="/2020/06/13/ksfjdbc/1566134718955.png" alt="1566134718955"></p></li></ul><p>在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path</p><p> <img src="/2020/06/13/ksfjdbc/1566134781682.png" alt="1566134781682"></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p> <img src="/2020/06/13/ksfjdbc/1566135290460.png" alt="1566135290460"></p><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="/2020/06/13/ksfjdbc/1566136831283.png" alt="1566136831283"></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="/2020/06/13/ksfjdbc/1555576477107.png" alt="1555576477107"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/atguigu</li><li>jdbc:mysql://localhost:3306/atguigu<strong>?useUnicode=true&amp;characterEncoding=utf8</strong>（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql://localhost:3306/atguigu?user=root&amp;password=123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</p></li><li><p>jdbc:sqlserver://localhost:1433:DatabaseName=atguigu</p></li></ul></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.提供java.sql.Driver接口实现类的对象</span>            Driver driver <span class="token operator">=</span> null<span class="token punctuation">;</span>            driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.提供url，指明具体操作的数据</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.提供Properties的对象，指明用户名和密码</span>            Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.调用driver的connect()，获取连接</span>            Connection conn <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.实例化Driver</span>            String className <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>            Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.提供url，指明具体操作的数据</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.提供Properties的对象，指明用户名和密码</span>            Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.调用driver的connect()，获取连接</span>            Connection conn <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.数据库连接的4个基本要素：</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>            String driverName <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.实例化Driver</span>            Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.注册驱动</span>            DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.获取连接</span>            Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConnection4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.数据库连接的4个基本要素：</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>            String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>            String driverName <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.加载驱动 （①实例化Driver ②注册驱动）</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Driver driver = (Driver) clazz.newInstance();</span>            <span class="token comment" spellcheck="true">//3.注册驱动</span>            <span class="token comment" spellcheck="true">//DriverManager.registerDriver(driver);</span>            <span class="token comment" spellcheck="true">/*            可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：            static {                try {                    DriverManager.registerDriver(new Driver());                } catch (SQLException var1) {                    throw new RuntimeException("Can't register driver!");                }            }             */</span>            <span class="token comment" spellcheck="true">//3.获取连接</span>            Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testConnection5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.加载配置文件</span>        InputStream is <span class="token operator">=</span> ConnectionTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.读取配置信息</span>        String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.获取连接</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">abc123</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="/2020/06/13/ksfjdbc/1566573842140.png" alt="1566573842140"></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">int</span> excuteUpdate<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>：执行更新操作<span class="token keyword">INSERT</span>、<span class="token keyword">UPDATE</span>、<span class="token keyword">DELETE</span>ResultSet executeQuery<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>：执行查询操作<span class="token keyword">SELECT</span></code></pre></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatementTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userName <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"密   码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// SELECT user,password FROM user_table WHERE USER = '1' or ' AND PASSWORD = '='1' or '1' = '1';</span>        String sql <span class="token operator">=</span> <span class="token string">"SELECT user,password FROM user_table WHERE USER = '"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">"' AND PASSWORD = '"</span> <span class="token operator">+</span> password                <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登陆成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用Statement实现对数据表的查询操作</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T t <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement st <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.加载配置文件</span>            InputStream is <span class="token operator">=</span> StatementTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.读取配置信息</span>            String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4.获取连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的元数据</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取结果集的列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// //1. 获取列的名称</span>                    <span class="token comment" spellcheck="true">// String columnName = rsmd.getColumnName(i+1);</span>                    <span class="token comment" spellcheck="true">// 1. 获取列的别名</span>                    String columnName <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 2. 根据列名获取对应数据表中的数据</span>                    Object columnVal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 3. 将数据表中得到的数据，封装进对象</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    st<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>综上：</p><p><img src="/2020/06/13/ksfjdbc/1566569819744.png" alt="1566569819744"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入 </p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span>Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.获取数据库的连接</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.填充占位符</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//4.执行sql语句</span>            ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//5.关闭资源</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.获取数据库连接</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2.预编译sql语句，得到PreparedStatement对象</span>            ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3.填充占位符</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 4.执行executeQuery(),得到结果集：ResultSet</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5.得到结果集的元数据：ResultSetMetaData</span>            ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                T t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 遍历每一个列</span>                    <span class="token comment" spellcheck="true">// 获取列值</span>                    Object columnVal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取列的别名:列的别名，使用类的属性名充当</span>                    String columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 6.2使用反射，给对象的相应属性赋值</span>                    Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 7.关闭资源</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="/2020/06/13/ksfjdbc/1555580152530.png" alt="1555580152530"></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta = rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 </p></li></ul></li></ul><p><img src="/2020/06/13/ksfjdbc/1555579494691.png" alt="1555579494691"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="/2020/06/13/ksfjdbc/1555579816884.png" alt="1555579816884"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img src="/2020/06/13/ksfjdbc/1555580275036.png" alt="1555580275036"></p><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img src="/2020/06/13/ksfjdbc/1555580735377.png" alt="1555580735377"></p><p>向数据表中添加如下数据：</p><p><img src="/2020/06/13/ksfjdbc/1555580763636.png" alt="1555580763636"></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img src="/2020/06/13/ksfjdbc/1555580937490.png" alt="1555580937490"></p><p><strong>代码实现3：完成学生信息的删除功能</strong></p><p><img src="/2020/06/13/ksfjdbc/1555580965019.png" alt="1555580965019"></p><hr><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="/2020/06/13/ksfjdbc/1555581069798.png" alt="1555581069798"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接</span>Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth,photo)values(?,?,?,?)"</span><span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 填充占位符</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"徐海强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"xhq@126.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 操作Blob类型的变量</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"xhq.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行</span>ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql <span class="token operator">=</span> <span class="token string">"update customers set photo = ? where id = ?"</span><span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 填充占位符</span><span class="token comment" spellcheck="true">// 操作Blob类型的变量</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"coffee.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> fis<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><pre class=" language-java"><code class="language-java">String sql <span class="token operator">=</span> <span class="token string">"SELECT id, name, email, birth, photo FROM customer WHERE id = ?"</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Integer id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date birth <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Customer cust <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birth<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//读取Blob类型的字段</span>    Blob photo <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InputStream is <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OutputStream os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"c.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>os <span class="token operator">!=</span>  null<span class="token punctuation">)</span><span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> goods<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><pre class=" language-java"><code class="language-java">Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Statement st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">20000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name) values('name_' + "</span><span class="token operator">+</span> i <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">20000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//82340</span>JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 修改1： 使用 addBatch() / executeBatch() / clearBatch() * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。 *          ?rewriteBatchedStatements=true 写在配置文件的url后面 * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar *  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.“攒”sql</span>        ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.执行</span>            ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.清空</span>            ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20000条：625                                                                         //1000000条:14733  </span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 层次四：在层次三的基础上操作* 使用Connection 的 setAutoCommit(false)  /  commit()*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.设置为不自动提交数据</span>    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into goods(name)values(?)"</span><span class="token punctuation">;</span>    PreparedStatement ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"name_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.“攒”sql</span>        ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.执行</span>            ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.清空</span>            ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.提交数据</span>    conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1000000条:4978 </span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都<strong>被提交(commit)</strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务<strong>回滚(rollback)</strong>到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 </p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJDBCTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.获取数据库连接</span>        conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.开启事务</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.进行数据库操作</span>        String sql1 <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance - 100 where user = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql1<span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟网络异常</span>        <span class="token comment" spellcheck="true">//System.out.println(10 / 0);</span>        String sql2 <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance + 100 where user = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql2<span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.若没有异常，则提交事务</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5.若有异常，则回滚事务</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//6.恢复每次DML操作的自动提交功能</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//7.关闭连接</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>其中，对数据库操作的方法为：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用事务以后的通用的增删改操作（version 2.0）</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection conn <span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PreparedStatement ps <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span>        ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.填充占位符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.执行sql语句</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 4.关闭资源</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br> 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br> 事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br> 事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br> 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="/2020/06/13/ksfjdbc/1555586275271.png" alt="1555586275271"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li></ul><ul><li>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><pre class=" language-mysql"><code class="language-mysql">SELECT @@tx_isolation;</code></pre></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><pre class=" language-mysql"><code class="language-mysql">set  transaction isolation level read committed;</code></pre></li><li><p>设置数据库系统的全局的隔离级别:</p><pre class=" language-mysql"><code class="language-mysql">set global transaction isolation level read committed;</code></pre></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><pre class=" language-mysql"><code class="language-mysql">create user tom identified by 'abc123';</code></pre></li><li><p>授予权限</p><pre class=" language-mysql"><code class="language-mysql">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.grant all privileges on *.* to tom@'%'  identified by 'abc123';  #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。grant select,insert,delete,update on atguigudb.* to tom@localhost identified by 'abc123'; </code></pre></li></ul></li></ul><h2 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="/2020/06/13/ksfjdbc/1566726681515.png" alt="1566726681515"></p><ul><li>层次结构：</li></ul><p><img src="/2020/06/13/ksfjdbc/1566745811244.png" alt="1566745811244"></p><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>ParameterizedType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>QueryRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanListHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>ScalarHandler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义一个用来被继承的对数据库进行基本操作的Dao *  * @author HanYanBing * * @param &lt;T> */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> QueryRunner queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个变量来接收泛型的类型</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span>    <span class="token keyword">public</span> <span class="token function">BaseDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取子类的类型</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取父类的类型</span>        <span class="token comment" spellcheck="true">// getGenericSuperclass()用来获取当前类的父类的类型</span>        <span class="token comment" spellcheck="true">// ParameterizedType表示的是带泛型的类型</span>        ParameterizedType parameterizedType <span class="token operator">=</span> <span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span>        <span class="token comment" spellcheck="true">// 这个方法会返回一个Type的数组</span>        Type<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> parameterizedType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取具体的泛型的类型·</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> types<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通用的增删改操作     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            count <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取一个对象     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T t <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取所有对象     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            list <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句     *      * @param sql     * @param params     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">getValue</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object count <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用queryRunner的query方法获取一个单一的值</span>            count <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Book<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 从数据库中查询出所有的记录     *      * @return     */</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 向数据库中插入一条记录     *      * @param book     */</span>    <span class="token keyword">void</span> <span class="token function">saveBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从数据库中根据图书的id删除一条记录     *      * @param bookId     */</span>    <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据图书的id从数据库中查询出一条记录     *      * @param bookId     * @return     */</span>    Book <span class="token function">getBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据图书的id从数据库中更新一条记录     *      * @param book     */</span>    <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取带分页的图书信息     *      * @param page：是只包含了用户输入的pageNo属性的page对象     * @return 返回的Page对象是包含了所有属性的Page对象     */</span>    Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取带分页和价格范围的图书信息     *      * @param page：是只包含了用户输入的pageNo属性的page对象     * @return 返回的Page对象是包含了所有属性的Page对象     */</span>    Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooksByPrice</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token keyword">double</span> minPrice<span class="token punctuation">,</span> <span class="token keyword">double</span> maxPrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据User对象中的用户名和密码从数据库中获取一条记录     *      * @param user     * @return User 数据库中有记录 null 数据库中无此记录     */</span>    User <span class="token function">getUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据User对象中的用户名从数据库中获取一条记录     *      * @param user     * @return true 数据库中有记录 false 数据库中无此记录     */</span>    <span class="token keyword">boolean</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 向数据库中插入User对象     *      * @param user     */</span>    <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Book<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>Page<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BaseDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BookDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中得到一个List的方法</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> beanList <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books"</span><span class="token punctuation">;</span>        beanList <span class="token operator">=</span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中通用的增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getImgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM books WHERE id = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中通用增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Book <span class="token function">getBookById</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>String bookId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个对象的方法</span>        Book book <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books where id = ?"</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> book<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中通用的增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooks</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取数据库中图书的总记录数</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from books"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个单一值的方法</span>        <span class="token keyword">long</span> totalRecord <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">getValue</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将总记录数设置都page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setTotalRecord</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> totalRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前页中的记录存放的List</span>        String sql2 <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个集合的方法</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> beanList <span class="token operator">=</span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql2<span class="token punctuation">,</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">,</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将这个List设置到page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>beanList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getPageBooksByPrice</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>Page<span class="token operator">&lt;</span>Book<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token keyword">double</span> minPrice<span class="token punctuation">,</span> <span class="token keyword">double</span> maxPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取数据库中图书的总记录数</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from books where price between ? and ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个单一值的方法</span>        <span class="token keyword">long</span> totalRecord <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">getValue</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span>minPrice<span class="token punctuation">,</span>maxPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将总记录数设置都page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setTotalRecord</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> totalRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前页中的记录存放的List</span>        String sql2 <span class="token operator">=</span> <span class="token string">"select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个集合的方法</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> beanList <span class="token operator">=</span> <span class="token function">getBeanList</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql2<span class="token punctuation">,</span> minPrice <span class="token punctuation">,</span> maxPrice <span class="token punctuation">,</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">,</span> Page<span class="token punctuation">.</span>PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将这个List设置到page对象中</span>        page<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>beanList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>BaseDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDao</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个对象的方法</span>        User bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,username,password,email from users where username = ? and password = ?"</span><span class="token punctuation">;</span>        bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用BaseDao中获取一个对象的方法</span>        User bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select id,username,password,email from users where username = ?"</span><span class="token punctuation">;</span>        bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into users(username,password,email) values(?,?,?)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用BaseDao中通用的增删改的方法</span>        <span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 图书类 * @author songhongkang * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 书名</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作者</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 价格</span>    <span class="token keyword">private</span> Integer sales<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 销量</span>    <span class="token keyword">private</span> Integer stock<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 库存</span>    <span class="token keyword">private</span> String imgPath <span class="token operator">=</span> <span class="token string">"static/img/default.jpg"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 封面图片的路径</span>    <span class="token comment" spellcheck="true">//构造器，get()，set()，toString()方法略</span><span class="token punctuation">}</span></code></pre><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 页码类 * @author songhongkang * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页查到的记录存放的集合</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PAGE_SIZE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页显示的记录数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageNo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前页</span><span class="token comment" spellcheck="true">//    private int totalPageNo; // 总页数，通过计算得到</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> totalRecord<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 总记录数，通过查询数据库得到</span></code></pre><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bookstore<span class="token punctuation">.</span>beans<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用户类 * @author songhongkang * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span></code></pre><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="/2020/06/13/ksfjdbc/1555593464033.png" alt="1555593464033"></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="/2020/06/13/ksfjdbc/1555593598606.png" alt="1555593598606"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    ComboPooledDataSource cpds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpds<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cpds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cpds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    cpds.setMaxPoolSize(100);</span>    Connection conn <span class="token operator">=</span> cpds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>获取连接方式二</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span><span class="token keyword">private</span> <span class="token keyword">static</span> DataSource cpds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token string">"helloc3p0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">{</span>    Connection conn <span class="token operator">=</span> cpds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，src下的配置文件为：【c3p0-config.xml】</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>named-config</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloc3p0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 获取连接的4个基本信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>abc123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql:///test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireIncrement<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 初始化数据库连接池时连接的数量 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池中的最小的数据库连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库连接池中的最大的数据库连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatements<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatementsPerConnection<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>named-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">></span></span></code></pre><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    BasicDataSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    source<span class="token punctuation">.</span><span class="token function">setInitialSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>获取连接方式二：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span><span class="token keyword">private</span> <span class="token keyword">static</span> DataSource source <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> DBCPTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"dbcp.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span>        source <span class="token operator">=</span> BasicDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Connection conn <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，src下的配置文件为：【dbcp.properties】</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">abc123</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment" spellcheck="true">#...</span></code></pre><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>druid<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDruid</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>TestDruid<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataSource ds <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，src下的配置文件为：【druid.properties】</p><pre class=" language-java"><code class="language-java">url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>rewriteBatchedStatements<span class="token operator">=</span><span class="token boolean">true</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span><span class="token number">123456</span>driverClassName<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DriverinitialSize<span class="token operator">=</span><span class="token number">10</span>maxActive<span class="token operator">=</span><span class="token number">20</span>maxWait<span class="token operator">=</span><span class="token number">1000</span>filters<span class="token operator">=</span>wall</code></pre><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li><li><p>API包说明：</p></li></ul><p><img src="/2020/06/13/ksfjdbc/1555595163263.png" alt="1555595163263"></p><p><img src="/2020/06/13/ksfjdbc/1555595198644.png" alt="1555595198644"></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <t> T insert(Connection conn,String sql,ResultSetHandler<t> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</t></t></li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <t> T insertBatch(Connection conn,String sql,ResultSetHandler<t> rsh,Object[][] params)throws SQLException：只支持INSERT语句</t></t></li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li><li><p>测试</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试添加</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth)values(?,?,?)"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token string">"何成飞"</span><span class="token punctuation">,</span> <span class="token string">"he@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"1992-09-08"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加了"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试删除</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"delete from customers where id &lt; ?"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"条记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li><strong>ScalarHandler：</strong>查询单个值对象</li></ul></li></ul><ul><li>测试</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 测试查询:查询一条记录 *  * 使用ResultSetHandler的实现类：BeanHandler */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id = ?"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    BeanHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Customer customer <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 测试查询:查询多条记录构成的集合 *  * 使用ResultSetHandler的实现类：BeanListHandler */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id &lt; ?"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    BeanListHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 自定义ResultSetHandler的实现类 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryInstance1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select id,name,email,birth from customers where id = ?"</span><span class="token punctuation">;</span>    ResultSetHandler<span class="token operator">&lt;</span>Customer<span class="token operator">></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultSetHandler</span><span class="token operator">&lt;</span>Customer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Customer <span class="token function">handle</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return new Customer(1,"Tom","tom@126.com",new Date(123323432L));</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Date birth <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"birth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Customer customer <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据， * 使用ScalarHandler *  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    QueryRunner runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试一：</span><span class="token comment" spellcheck="true">//    String sql = "select count(*) from customers where id &lt; ?";</span><span class="token comment" spellcheck="true">//    ScalarHandler handler = new ScalarHandler();</span><span class="token comment" spellcheck="true">//    long count = (long) runner.query(conn, sql, handler, 20);</span><span class="token comment" spellcheck="true">//    System.out.println(count);</span>    <span class="token comment" spellcheck="true">//测试二：</span>    String sql <span class="token operator">=</span> <span class="token string">"select max(birth) from customers"</span><span class="token punctuation">;</span>    ScalarHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Date birth <span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><pre class=" language-java"><code class="language-java">总结<span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateWithTx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取连接的操作（</span>        <span class="token comment" spellcheck="true">//① 手写的连接：JDBCUtils.getConnection();</span>        <span class="token comment" spellcheck="true">//② 使用数据库连接池：C3P0;DBCP;Druid</span>        <span class="token comment" spellcheck="true">//2.对数据表进行一系列CRUD操作</span>        <span class="token comment" spellcheck="true">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span><span class="token comment" spellcheck="true">//version2.0的增删改public void update(Connection conn,String sql,Object ... args){}</span><span class="token comment" spellcheck="true">//version2.0的查询 public &lt;T> T getInstance(Connection conn,Class&lt;T> clazz,String sql,Object ... args){}</span>        <span class="token comment" spellcheck="true">//② 使用dbutils提供的jar包中提供的QueryRunner类</span>        <span class="token comment" spellcheck="true">//提交数据</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//回滚数据</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.关闭连接等操作</span>        <span class="token comment" spellcheck="true">//① JDBCUtils.closeResource();</span>        <span class="token comment" spellcheck="true">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blogJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2020/06/13/spring/"/>
      <url>/2020/06/13/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>​                                                                                                                                                                                                                           </p><p>​                                                                                                                                                                                                                                             </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL启动问题解决</title>
      <link href="/2020/06/13/MySQL/"/>
      <url>/2020/06/13/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL启动错误相关解决"><a href="#MySQL启动错误相关解决" class="headerlink" title="MySQL启动错误相关解决"></a>MySQL启动错误相关解决</h1><p>​                                                                                                                                                                                                                                           </p><p>​               </p><h2 id="MySQL错误：2003-Can’t-connect-to-MySQL-server-on-‘localhost’-10061-“unknown-error”"><a href="#MySQL错误：2003-Can’t-connect-to-MySQL-server-on-‘localhost’-10061-“unknown-error”" class="headerlink" title="MySQL错误：2003-Can’t connect to MySQL server on ‘localhost’(10061 “unknown error”)"></a>MySQL错误：2003-Can’t connect to MySQL server on ‘localhost’(10061 “unknown error”)</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><p>​       开启本地的MySQL服务，这样很容易就可以解决这个问题了。如果这样无法解决问题您可以再尝试一下第二种解决方案。</p><p><img src="/2020/06/13/MySQL/1.jpg" alt="MySQL"></p><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p>第二种解决方案是后来想到会不会是因为每一次卸载的时候没有彻底卸载干净，然后就彻彻底底卸载干净了再重装，然后就成功了！因为上一次安装的数据库在C盘的配置文件还存在，对后面安装时的配置文件产生了冲突，所有导致了这个问题。话不多说，直接上干货！</p><p>　　1）删除程序。进入控制面板-&gt;在程序和功能选项卡中找到MySQL，右键卸载。</p><p>　　2）删除安装文件夹下的所有内容。找到MySQL的安装路径，然后删除路径下所有文件。</p><p>　　3）删除注册表。Windows+R打开运行命令框，输入regedit回车，删除以下3个地方的注册文件：</p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL 目录删除 </p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL 目录删除 </p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL 目录删除</p><p>　　4）最重要的一点（我就是由于没有删除此文件而导致出错的）：进入C盘，选中查看-&gt;勾选“隐藏的项目”，然后下面就出来隐藏目录（ProgramData）了，进入其中，删除MySQL文件夹。</p><p>　　到此，你需要做的就只是重装一遍就行了！　　<br>————————————————<br>版权声明：本文为CSDN博主「努力的凹凸曼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/py_123456/article/details/79694786" target="_blank" rel="noopener">https://blog.csdn.net/py_123456/article/details/79694786</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb</title>
      <link href="/2020/06/12/Javaweb/"/>
      <url>/2020/06/12/Javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p>​                                                                                                                                                                                                                                        </p><p><img src="/2020/06/12/Javaweb/5.PNG" alt="javaweb"></p><p>常见状态码：</p><p>200：一切正常</p><p>300/301:页面重定向（跳转）</p><p>404：资源不存在</p><p>403：权限不足（如果访问a目录，但是a目录设置，不可见）</p><p><img src="/2020/06/12/Javaweb/6.PNG" alt="javaweb"></p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><p>1.先导入 JSTL jar包</p><pre><code> taglibs-standard-impl-1.2.1.jar  taglibs-standard-spec-1.2.1.jar</code></pre><p>2.使用taglib指令引入标签库</p><pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</code></pre><p>core核心库使用：</p><p>i.  ‘&lt;c:set&gt;’（使用很少）</p><p>作用：set 标签可以往域中保存数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>i<span class="token punctuation">.</span><span class="token operator">&lt;</span>c<span class="token punctuation">:</span><span class="token keyword">set</span> <span class="token operator">/</span><span class="token operator">></span>       作用：<span class="token keyword">set</span> 标签可以往域中保存数据       域对象<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>       scope 属性设置保存到哪个域       page 表示 PageContext 域（默认值）      request 表示 Request 域      session 表示 Session 域       application 表示 ServletContext 域       <span class="token keyword">var</span> 属性设置 key 是多少      value 属性设置值   <span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>   保存之前：$<span class="token punctuation">{</span> sessionScope<span class="token punctuation">.</span>abc <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">></span>   <span class="token operator">&lt;</span>c<span class="token punctuation">:</span><span class="token keyword">set</span> scope<span class="token operator">=</span><span class="token string">"session"</span> <span class="token keyword">var</span><span class="token operator">=</span><span class="token string">"abc"</span> value<span class="token operator">=</span><span class="token string">"abcValue"</span><span class="token operator">/</span><span class="token operator">></span>      保存之后：$<span class="token punctuation">{</span> sessionScope<span class="token punctuation">.</span>abc <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">></span></code></pre><p>ii.  <code>&lt;c:if/&gt;</code></p><pre><code>   if标签用来做if判断</code></pre><pre><code>&lt;%--       ii.&lt;c:if /&gt;          if 标签用来做 if 判断。           test 属性表示判断的条件（使用 EL 表达式输出） --%&gt;&lt;c:if test="${ 12 == 12 }"&gt;        &lt;h1&gt;12 等于 12&lt;/h1&gt;&lt;/c:if&gt;&lt;c:if test="${ 12 != 12 }"&gt;        &lt;h1&gt;12 不等于 12&lt;/h1&gt;&lt;/c:if&gt;</code></pre><p>iii.<code>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;</code>标签</p><pre><code>&lt;%-- iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签作用：多路判断。跟 switch ... case .... default 非常接近 choose 标签开始选择判断 when 标签表示每一种判断情况       test 属性表示当前这种判断情况的值 otherwise 标签表示剩下的情况 &lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：     1、标签里不能使用 html 注释，要使用 jsp 注释     2、when 标签的父标签一定要是 choose 标签 --%&gt; &lt;%      request.setAttribute("height", 180); %&gt;&lt;c:choose&gt; &lt;%-- 这是 html 注释 --%&gt; &lt;c:when test="${ requestScope.height &gt; 190 }"&gt;             &lt;h2&gt;小巨人&lt;/h2&gt; &lt;/c:when&gt; &lt;c:when test="${  requestScope.height &gt; 180 }"&gt;&lt;h2&gt;很高&lt;/h2&gt;&lt;/c:when&gt; &lt;c:when test="${ requestScope.height &gt; 170 }"&gt;&lt;h2&gt;还可以&lt;/h2&gt;&lt;/c:when&gt;&lt;c:otherwise&gt;     &lt;c:choose&gt;      &lt;c:when test="${requestScope.height &gt; 160}"&gt;      &lt;h3&gt;大于 160&lt;/h3&gt;      &lt;/c:when&gt;     &lt;c:when test="${requestScope.height &gt; 150}"&gt;      &lt;h3&gt;大于 150&lt;/h3&gt;      &lt;/c:when&gt;     &lt;c:when test="${requestScope.height &gt; 140}"&gt;     &lt;h3&gt;大于 140&lt;/h3&gt;     &lt;/c:when&gt;      &lt;c:otherwise&gt;     其他小于 140      &lt;/c:otherwise&gt;      &lt;/c:choose&gt;      &lt;/c:otherwise&gt;      &lt;/c:choose&gt;</code></pre><p>iv.<code>&lt;c:forEach /&gt;</code></p><p>作用：遍历输出使用。</p><p><strong>1.</strong> <strong>遍历</strong> <strong>1</strong> <strong>到</strong> 10，输出</p><pre><code>&lt;%--1.遍历 1 到 10，输出     begin 属性设置开始的索引    end 属性设置结束的索引     var 属性表示循环的变量(也是当前正在遍历到的数据)     for (int i = 1; i &lt; 10; i++)     --%&gt;     &lt;table border="1"&gt;     &lt;c:forEach begin="1" end="10" var="i"&gt;     &lt;tr&gt;    &lt;td&gt;    第${i}行    &lt;/td&gt;     &lt;/tr&gt;     &lt;/c:forEach&gt;     &lt;/table&gt;</code></pre><p><strong>2.</strong> <strong>遍历</strong> <strong>Object</strong> <strong>数组</strong> </p><pre><code>&lt;%-- 2.遍历 Object 数组        for (Object item: arr)       items 表示遍历的数据源（遍历的集合）       var 表示当前遍历到的数据        --%&gt;        &lt;%       request.setAttribute("arr", new String[]{"18610541354","18688886666","18699998888"});       %&gt;       &lt;c:forEach items="${ requestScope.arr }" var="item"&gt;        ${ item } &lt;br&gt;        &lt;/c:forEach&gt;</code></pre><p><strong>3.</strong> <strong>遍历</strong> <strong>Map</strong> <strong>集合</strong></p><pre><code>&lt;%** Map&lt;String,Object&gt; map = **new** HashMap&lt;String, Object&gt;(); map.put(**"key1"**, **"value1"**); map.put(**"key2"**, **"value2"**); map.put(**"key3"**, **"value3"**); *//* *for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {* *//* *}* request.setAttribute(**"map"**, map); **%&gt;**&lt;**c****:forEach** **items****="****${** requestScope.map **}****"** **var****="entry"**&gt; &lt;**h1**&gt;**${**entry.key**}** = **${**entry.value**}**&lt;/**h1**&gt; &lt;/**c****:forEach**&gt;</code></pre><p><strong>4.</strong> <strong>遍历</strong> <strong>List</strong> <strong>集合**</strong>—list** <strong>中存放</strong> <strong>Student</strong> <strong>类，有属性：编号，用户名，密码，年龄，</strong> </p><p><strong>电话信息</strong></p><pre class=" language-java"><code class="language-java">Student 类： <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">public</span> <span class="token keyword">class</span><span class="token operator">*</span><span class="token operator">*</span> Student <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">//4.**编号，用户名，密码，年龄，电话信息* </span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> Integer <span class="token operator">*</span><span class="token operator">*</span>id<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> String <span class="token operator">*</span><span class="token operator">*</span>username<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> String <span class="token operator">*</span><span class="token operator">*</span>password<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> Integer <span class="token operator">*</span><span class="token operator">*</span>age<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> String <span class="token operator">*</span><span class="token operator">*</span>phone<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--4.**遍历*</span> <span class="token attr-name">*List*</span> <span class="token attr-name">*集合**---list*</span> <span class="token attr-name">*中存放*</span> <span class="token attr-name">*Student*</span> <span class="token attr-name">*类，有属性：编号，用户名，密码，年龄，电话信息**--%</span><span class="token punctuation">></span></span>* **<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%**</span> <span class="token attr-name">List&lt;Student</span><span class="token punctuation">></span></span> studentList = **new** ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">></span></span>(); **for** (**int** i = 1; i &lt;= 10; i++) { studentList.add(**new** Student(i,**"username"**+i ,**"pass"**+i,18+i,**"phone"**+i)); }request.setAttribute(**"stus"**, studentList); **%>**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**tr**</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**tr**</span><span class="token punctuation">></span></span> *&lt;%--**items* *表示遍历的集合* *var* *表示遍历到的数据* *begin* *表示遍历的开始索引值* *end* *表示结束的索引值* *step* *属性表示遍历的步长值* *varStatus* *属性表示当前遍历到的数据的状态* *for**（**int i = 1; i &lt; 10; i+=2**）* *--%>* &lt;**c****:forEach** **begin****="2"** **end****="7"** **step****="2"** **varStatus****="status"** **items****="****${**requestScope.stus**}****"** **var****="stu"**> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**tr**</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.id**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.username**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.password**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.age**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.phone**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**status.step**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**tr**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">**c****:</span>forEach**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**table**</span><span class="token punctuation">></span></span></code></pre><h2 id="文件的上传"><a href="#文件的上传" class="headerlink" title="文件的上传"></a>文件的上传</h2><p>文件的上传和下载，是非常常见的功能，很多的系统中，或者软件中经常使用文件的上传和下载。</p><h3 id="1-文件的上传介绍"><a href="#1-文件的上传介绍" class="headerlink" title="1.文件的上传介绍"></a>1.文件的上传介绍</h3><p>1.要有一个form标签，method=post请求</p><p>2.form标签的encType属性值必须为multipart/form-data值</p><p>3.在form标签中只用input type=file添加上传的文件</p><p>4.编写服务器代码（servlet）接收，处理上传数据</p><p>encType=multipart/form-data 表示提交的数据，以多段的形式进行拼接。然后以二进制流的形式发送给服务器</p><img src="/2020/06/12/Javaweb/1.PNG" alt="Javawe" style="zoom:200%;"><p><strong>第一步，就是需要导入两个</strong> <strong>jar</strong> <strong>包：</strong> </p><p>commons-fileupload-1.2.1.jar </p><p>commons-io-1.4.jar</p><p><strong>commons-fileupload.jar</strong> <strong>和</strong> <strong>commons-io.jar</strong> <strong>包中，我们常用的类有哪些？</strong> </p><p>ServletFileUpload 类，用于解析上传的数据。 </p><p>FileItem 类，表示每一个表单项。 </p><pre><code>boolean ServletFileUpload.*isMultipartContent*(HttpServletRequest request); </code></pre><p>判断当前上传的数据格式是否是多段的格式。 </p><pre><code>public List&lt;FileItem&gt; parseRequest(HttpServletRequest request) </code></pre><p>解析上传的数据 </p><pre><code>boolean FileItem.isFormField() </code></pre><p>判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。 </p><p>true 表示普通类型的表单项 </p><p>false 表示上传的文件类型 </p><pre><code>String FileItem.getFieldName() </code></pre><p>获取表单项的 name 属性值</p><pre><code>String FileItem.getString() </code></pre><p>获取当前表单项的值。 </p><pre><code>String FileItem.getName(); </code></pre><p>获取上传的文件名 </p><pre><code>void FileItem.write( file ); </code></pre><p>将上传的文件写到 参数 file 所指向抽硬盘位置 。 </p><p>1.3、fileupload  类库的使用：</p><p>上传文件的表单：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.31.74:8080/09_EL_JSTL/uploadServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> 头像：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>解析上传的数据的代码： </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 用来处理上传的数据 * @param req * @param resp * @throws ServletException * @throws IOException */</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//1 先判断上传的数据是否多段数据（只有是多段的数据，才是文件上传的） </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ServletFileUpload<span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 创建 FileItemFactory 工厂实现类</span>              FileItemFactory fileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建用于解析上传数据的工具类 ServletFileUpload 类 </span>         ServletFileUpload servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>fileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解析上传的数据，得到每一个表单项</span>   FileItem List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> list <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 循环判断，每一个表单项，是普通类型，还是上传的文件</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem fileItem <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 普通表单项 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的 name 属性值："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数 UTF-8.解决乱码问题 System.out.println("表单项的 value 属性值：" + fileItem.getString("UTF-8")); } else { // 上传的文件 System.out.println("表单项的 name 属性值：" + fileItem.getFieldName()); </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\"</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h2><p><strong>下载的常用</strong> <strong>API</strong> <strong>说明：</strong> </p><p>response.getOutputStream(); </p><p>servletContext.getResourceAsStream(); </p><p>servletContext.getMimeType(); </p><p>response.setContentType(); </p><p>response.setHeader(“Content-Disposition”, “attachment; fileName=1.jpg”); </p><p>这个响应头告诉浏览器。这是需要下载的。而 attachment 表示附件，也就是下载的一个文件。fileName=后面， </p><p>表示下载的文件名。 </p><p>完成上面的两个步骤，下载文件是没问题了。但是如果我们要下载的文件是中文名的话。你会发现，下载无法正确 </p><p>显示出正确的中文名。 </p><p>原因是在响应头中，不能包含有中文字符，只能包含 ASCII 码。文件下载示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 1、获取要下载的文件名 </span>String downloadFileName <span class="token operator">=</span> <span class="token string">"2.jpg"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2、读取要下载的文件内容 (通过 ServletContext 对象可以读取) </span>ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取要下载的文件类型</span>String mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载的文件类型："</span> <span class="token operator">+</span> mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4、在回传前，通过响应头告诉客户端返回的数据类型 </span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5、还要告诉客户端收到的数据是用于下载使用（还是使用响应头） </span><span class="token comment" spellcheck="true">// Content-Disposition 响应头，表示收到的数据怎么处理 </span><span class="token comment" spellcheck="true">// attachment 表示附件，表示下载使用 </span><span class="token comment" spellcheck="true">// filename= 表示指定下载的文件名 </span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** /斜杠被服务器解析表示地址为 http://ip:prot/工程名/ 映射 到代码的 Web 目录 */</span> InputStream resourceAsStream <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取响应的输出流</span>OutputStream outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3、把下载的文件内容回传给客户端 // 读取输入流中全部的数据，复制给输出流，输出给客户端 IOUtils.copy(resourceAsStream,outputStream); }</span></code></pre><p><strong>附件中文名乱码问题解决方案：</strong> </p><p><strong>方案一：**</strong>URLEncoder** <strong>解决</strong> <strong>IE</strong> <strong>和谷歌浏览器的 附件中</strong> </p><p><strong>文名问题。</strong> </p><p>如果客户端浏览器是 IE 浏览器 或者 是谷歌浏览器。我们需要使用 URLEncoder 类先对中文名进行 UTF-8 的编码 </p><p>操作。</p><p>因为 IE 浏览器和谷歌浏览器收到含有编码后的字符串后会以 UTF-8 字符集进行解码显示。 </p><p>// 把中文名进行 UTF-8 编码操作。 </p><p>String str = “attachment; fileName=” + URLEncoder.<em>encode</em>(“中文.jpg”, “UTF-8”);// 然后把编码后的字符串设置到响应头中 </p><p>response.setHeader(“Content-Disposition”, str); </p><p>方案二：BASE64 <strong>编解码 解决 火狐浏览器的附件中文名问</strong> 题</p><p>如果客户端浏览器是火狐浏览器。 那么我们需要对中文名进行 BASE64 的编码操作。 </p><p>这时候需要把请求头 Content-Disposition: attachment; filename=中文名 </p><p>编码成为：Content-Disposition: attachment; filename==?charset?B?xxxxx?= </p><p>=?charset?B?xxxxx?= 现在我们对这段内容进行一下说明。 </p><p>=? </p><p>表示编码内容的开始 </p><p>charset </p><p>表示字符集 </p><p>B </p><p>表示 BASE64 编码 </p><p>xxxx </p><p>表示文件名 BASE64 编码后的内容 </p><p>?= </p><p>表示编码内容的结束 </p><p><strong>BASE64</strong> <strong>编解码操作：</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> String content <span class="token operator">=</span> <span class="token string">"这是需要 Base64 编码的内容"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个 Base64 编码器</span>BASE64Encoder base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行 Base64 编码操作 </span>String encodedString <span class="token operator">=</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> encodedString <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建 Base64 解码器 </span>BASE64Decoder base64Decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解码操作 byte[] bytes = base64Decoder.decodeBuffer(encodedString); </span>String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>因为火狐使用的是</strong> <strong>BASE64</strong> <strong>的编解码方式还原响应中的汉字。所以需要使用</strong> <strong>BASE64Encoder</strong> <strong>类进行编码操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用下面的格式进行 BASE64 编码后</span>String str <span class="token operator">=</span> <span class="token string">"attachment; fileName="</span> <span class="token operator">+</span> <span class="token string">"=?utf-8?B?"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"中文.jpg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置到响应头中 </span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么我们如何解决上面两种不同编解码方式呢。我们只需要通过判断请求头中 User-Agent 这个请求头携带过来的 </p><p>浏览器信息即可判断出是什么浏览器。 </p><p>如下： </p><pre class=" language-java"><code class="language-java">String ua <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否是火狐浏览器</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 使用下面的格式进行 BASE64 编码后 </span>String str <span class="token operator">=</span> <span class="token string">"attachment; fileName="</span> <span class="token operator">+</span> <span class="token string">"=?utf-8?B?"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"中文.jpg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置到响应头中 </span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 把中文名进行 UTF-8 编码操作。</span>String str <span class="token operator">=</span> <span class="token string">"attachment; fileName="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"中文.jpg"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 然后把编码后的字符串设置到响应头中 </span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>1.cookie是服务器通知客户端保存键值对的一种技术</p><p>2.客户端有了cookie后，每次请求都发送给服务器</p><p>3.每个Cookie的大小不能超过4kb</p><h3 id="cookie的创建"><a href="#cookie的创建" class="headerlink" title="cookie的创建"></a>cookie的创建</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createCookie</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//1.创建cookie对象</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//2.通知客户端保存Cookie</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Cookie创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>乱码问题</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//解决post请求中文乱码问题</span>        <span class="token comment" spellcheck="true">//一定要在请求获取参数之前调用</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解决响应乱码前调用</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="cookie值得获取"><a href="#cookie值得获取" class="headerlink" title="cookie值得获取"></a>cookie值得获取</h3><p>工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Cookie <span class="token function">findCookie</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token operator">||</span>cookies <span class="token operator">==</span> null<span class="token operator">||</span>cookies<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> cookie<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>getcookie方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie iwantcookie <span class="token operator">=</span> CookieUtils<span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>iwantcookie<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>              resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"摘到了"</span><span class="token operator">+</span>iwantcookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>iwantcookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span></code></pre><h3 id="cookie的修改"><a href="#cookie的修改" class="headerlink" title="cookie的修改"></a>cookie的修改</h3><p>方案一：</p><p>1.先创建一个要修改的同名的cookie对象</p><p>2.在构造器中，同时赋予新的cookie值。</p><p>3.调用response.addcookie(Cookie);</p><p>方案二</p><p>1.先查找到需要修改的cookie对象</p><p>2.调用setvalue方法赋予新的cookie值</p><p>3.调用resp.addcookie通知客户端保存修改</p><h3 id="Cookie的生命控制"><a href="#Cookie的生命控制" class="headerlink" title="Cookie的生命控制"></a>Cookie的生命控制</h3><p>Cookie的生命控制的是如何管理cookie什么时候被销毁（删除）</p><p>setMaxage（）</p><p>​          正数，表示在指定的秒数后过期</p><p>​          负数，表示浏览器一关，Cookie就会被删除（默认值是-1）</p><p>​           零，表示马上删除cookie</p><h3 id="Cookie有效路径的Path设置"><a href="#Cookie有效路径的Path设置" class="headerlink" title="Cookie有效路径的Path设置"></a>Cookie有效路径的Path设置</h3><p>Cookie的path属性可以有效过滤哪些cookie可以发送给服务器，那些不发</p><p>path属性是通过请求的地址来进行有效的过滤</p><p>cookieA     path=/工程路径</p><p>cookieB     path=/工程路径/abc</p><p>请求地址如下：</p><p>http：//ip:port/工程路径/a.html</p><p>​    cookieA   发送</p><p>   cookieB     不发送</p><p>http：//ip:port/工程路径/abc/a.html</p><p>   cookieA   发送</p><p>   cookieB   发送</p><p>Cookie练习</p><p>免输入用户登录 </p><h2 id="Session会话"><a href="#Session会话" class="headerlink" title="Session会话"></a>Session会话</h2><h3 id="什么是Session会话"><a href="#什么是Session会话" class="headerlink" title="什么是Session会话"></a>什么是Session会话</h3><p>1.Session是一个接口（HttpSession）</p><p>2.session就是会话，它是用来维护客户端和服务器关联的一种技术。</p><p>3.每个客户端都有一个自己的Session会话</p><p>4.Session会话中，我们经常用来保存登陆之后的信息</p><h3 id="如何创建Session和获取（id号，是否为新）"><a href="#如何创建Session和获取（id号，是否为新）" class="headerlink" title="如何创建Session和获取（id号，是否为新）"></a>如何创建Session和获取（id号，是否为新）</h3><p>  如何创建和获取session，他们的API是一样的</p><p>request.getSession()</p><p>​     第一次调用是：创建Session会话</p><p>​    之后调用都是：获取前面创建好的Session会话对象。</p><p>  isNew():判断到底是不是刚创建出来的（新的）</p><p>​           true  表示刚创建</p><p>​          false  表示获取之前创建</p><p>每个会话都有一个身份证号，也就是id值，而且这个id是唯一的。</p><p>get（）得到Session的会话id值</p><h3 id="Session域数据的获取"><a href="#Session域数据的获取" class="headerlink" title="Session域数据的获取"></a>Session域数据的获取</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     *往session中存入数据     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>          req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"已经往session中保存数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * session中获取数据     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Object key1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"从session中获取的session是"</span><span class="token operator">+</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Session生命周期控制"><a href="#Session生命周期控制" class="headerlink" title="Session生命周期控制"></a>Session生命周期控制</h3><p>​     public void setMAXinactiveInterval（int interval）设置Session的超时时间（以秒为单位），超过指定的时长。session就会被销毁。</p><p>​              值为正数的时候，设定Session的超时时长</p><p>​              值为负数的时候，表示Session永不超时（极少使用）</p><p>​     public  int getMaxInactiveInterval（）获取session的超时时间    </p><p>  public    void  invalidate（）让当前session会话马上超时无效</p><p>​       Session默认的超时时长为30分钟</p><p>因为在Tomcat服务器的配置文件web.xml中默认有以下</p><p>配置：它就表示配置了当前Tomcat服务器下所有的Session超时配置默认时长为：30分钟。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>session<span class="token operator">-</span>config<span class="token operator">></span>  <span class="token operator">&lt;</span>session<span class="token operator">-</span>timeout<span class="token operator">></span><span class="token number">30</span><span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>timeout<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>config<span class="token operator">></span></code></pre><p>如果说，你希望你的web工程，默认的session的超时时长为其他时长，你可以在你自己的web.xml配置文件中做以上相同的配置，就可以修改你的web工程所有Session的默认超时时长</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>表示当前web工程<span class="token punctuation">,</span>创建出来的所有Session默认是<span class="token number">20</span>分钟超时时长<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>session<span class="token operator">-</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span>session<span class="token operator">-</span>timeout<span class="token operator">></span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>timeout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>config<span class="token operator">></span></code></pre><p>如果你想只修改个别Session的超时时长，就可以使用上面的API。 setMAXinactiveInterval（int interval）来进行单独的设置。</p><p>  session. setMAXinactiveInterval（int interval单独设置超时时长</p><p>session的超时概念介绍：</p><p><img src="/2020/06/12/Javaweb/2.png" alt="session超时"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">life3</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置Sessionn超时时长</span>        <span class="token comment" spellcheck="true">//获取当前Session对象</span>        HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置超时时长3秒</span>        session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前超时时长</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"当前超时时长"</span><span class="token operator">+</span>session<span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>浏览器和session之间关联的技术内幕</p><p>session技术，底层其实是基于cookie技术来实现的</p><p><img src="/2020/06/12/Javaweb/3.png" alt="浏览器和session关联的技术"></p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h3><p>Threadlocal的作用，它可以解决多线程的数据安全问题。</p><p>Threadlocal它可以给当前线程关联一个数据（可以是普通变量，也可以是数组，集合）</p><p>ThreadLocal的特点：</p><p>​           1.Thread可以为当前线程关联一个数据，（它可以像Map一样存取数据，key为当前线程）</p><p>​            2.每一个Threadlocal对象。如果要为当前线程关联多个数据，就需要使用多个Threadlocal对象实例。</p><p>​          3.没个Threadlocal对象实例定义的时候，一般都是static类型</p><p>​           4.Threadlocal中保存数据，在线程销毁后，会由jvm虚拟机自动释放</p><p>使用Filter过滤器统一给所有的Service方法都加上try-catch来进行实现的管理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OrderService 当前线程["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]中保存的数据是："</span> <span class="token operator">+</span>           ThreadLocalTest<span class="token punctuation">.</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">OrderDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OrderDao 当前线程["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]中保存的数据是："</span> <span class="token operator">+</span> ThreadLocalTest<span class="token punctuation">.</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalTest</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// public static Map&lt;String,Object> data = new Hashtable&lt;String,Object>(); </span>              <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>Object<span class="token operator">></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">private</span> <span class="token keyword">static</span> Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// 在 Run 方法中，随机生成一个变量（线程要关联的数据），然后以当前线程名为 key 保存到 map 中 </span>                  Integer i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 获取当前线程名 </span>                  String name <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程["</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"]生成的随机数是："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// data.put(name,i); threadLocal.set(i);</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>                  <span class="token keyword">new</span> <span class="token class-name">OrderService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 在 Run 方法结束之前，以当前线程名获取出数据并打印。查看是否可以取出操作</span>                  <span class="token comment" spellcheck="true">// Object o = data.get(name); </span>                  Object o <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在线程["</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"]快结束时取出关联的数据是："</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>                                                            <span class="token punctuation">}</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token punctuation">}</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span></code></pre><h3 id="将所有异常都统一交给Tomcat，让tomcat展示友好错误界面"><a href="#将所有异常都统一交给Tomcat，让tomcat展示友好错误界面" class="headerlink" title="将所有异常都统一交给Tomcat，让tomcat展示友好错误界面"></a>将所有异常都统一交给Tomcat，让tomcat展示友好错误界面</h3><p>在web.xml中我们可以通过错误界面配置来进行管理</p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析 和生成。 它基于 JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999 的一 个子集。 JSON 采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。 这些特性使 JSON 成为理想的数据交换语言。</p><p>json 是一种轻量级的数据交换格式。 </p><p>轻量级指的是跟 xml 做比较。 </p><p>数据交换指的是客户端和服务器之间业务数据的传递格式</p><h3 id="Json在JavaScript中的使用"><a href="#Json在JavaScript中的使用" class="headerlink" title="Json在JavaScript中的使用"></a>Json在JavaScript中的使用</h3><p>json 是由键值对组成，并且由花括号（大括号）包围。每个键由引号引起来，键和值之间使用冒号进行分隔， </p><p>多组键值对之间进行逗号进行分隔。 </p><p>json 定义示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> jsonObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"key1"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"key4"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"arr"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"key5"</span><span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token string">"key5_1"</span> <span class="token punctuation">:</span> <span class="token number">551</span><span class="token punctuation">,</span> <span class="token string">"key5_2"</span> <span class="token punctuation">:</span> <span class="token string">"key5_2_value"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"key6"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">"key6_1_1"</span><span class="token punctuation">:</span><span class="token number">6611</span><span class="token punctuation">,</span> <span class="token string">"key6_1_2"</span><span class="token punctuation">:</span><span class="token string">"key6_1_2_value"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"key6_2_1"</span><span class="token punctuation">:</span><span class="token number">6621</span><span class="token punctuation">,</span> <span class="token string">"key6_2_2"</span><span class="token punctuation">:</span><span class="token string">"key6_2_2_value"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="json-的访问"><a href="#json-的访问" class="headerlink" title="json 的访问"></a>json 的访问</h3><p>json 本身是一个对象。 </p><p>json 中的 key 我们可以理解为是对象中的一个属性。 </p><p>json 中的 key 访问就跟访问对象的属性一样： json 对象.key </p><p>json 访问示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// object json 就是一个对象 alert(jsonObj.key1); //12 alert(jsonObj.key2); // abc alert(jsonObj.key3); // true alert(jsonObj.key4);// 得到数组[11,"arr",false] // json 中 数组值的遍历 for(var i = 0; i &lt; jsonObj.key4.length; i++) { alert(jsonObj.key4[i]); }alert(jsonObj.key5.key5_1);//551 alert(jsonObj.key5.key5_2);//key5_2_value alert( jsonObj.key6 );// 得到 json 数组 // 取出来每一个元素都是 json 对象 var jsonItem = jsonObj.key6[0]; // alert( jsonItem.key6_1_1 ); //6611 alert( jsonItem.key6_1_2 );</span></code></pre><h3 id="json-的两个常用方法"><a href="#json-的两个常用方法" class="headerlink" title="json 的两个常用方法"></a>json <strong>的两个常用方法</strong></h3><p>json 的存在有两种形式。 </p><p>一种是：对象的形式存在，我们叫它 json 对象。 </p><p>一种是：字符串的形式存在，我们叫它 json 字符串。 </p><p>一般我们要操作 json 中的数据的时候，需要 json 对象的格式。 </p><p>一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。 </p><p>JSON.stringify() </p><p>把 json 对象转换成为 json 字符串 </p><p>JSON.parse() </p><p>把 json 字符串转换成为 json 对象示例代码： </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 把 json 对象转换成为 json 字符串 </span><span class="token keyword">var</span> jsonObjString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 特别像 Java 中对象的 toString </span><span class="token function">alert</span><span class="token punctuation">(</span>jsonObjString<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把 json 字符串。转换成为 json 对象 </span><span class="token keyword">var</span> jsonObj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonObjString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj2<span class="token punctuation">.</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 12 alert(jsonObj2.key2);// abc</span></code></pre><h3 id="JSON-在-java-中的使用"><a href="#JSON-在-java-中的使用" class="headerlink" title="JSON 在 java 中的使用"></a>JSON <strong>在</strong> <strong>java</strong> <strong>中的使用</strong></h3><h4 id="javaBean-和-json的互转"><a href="#javaBean-和-json的互转" class="headerlink" title="javaBean 和 json的互转"></a>javaBean 和 json的互转</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"国哥好帅!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建 Gson 对象实例 </span>Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// toJson 方法可以把 java 对象转换成为 json 字符串 String personJsonString = gson.toJson(person);</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fromJson 把 json 字符串转换回 Java 对象 </span><span class="token comment" spellcheck="true">// 第一个参数是 json 字符串 </span><span class="token comment" spellcheck="true">// 第二个参数是转换回去的 Java 对象类型 </span>Person person1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> S</code></pre><h4 id="List-和-json-的互转"><a href="#List-和-json-的互转" class="headerlink" title="List 和 json 的互转"></a>List 和 <strong>json</strong> 的互转</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.2.2、List 和 json 的互转 </span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"国哥"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"康师傅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把 List 转换为 json 字符串 </span>String personListJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personList<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PersonListType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> Person person <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="map-和-json-的互转"><a href="#map-和-json-的互转" class="headerlink" title="map 和 json 的互转"></a>map <strong>和</strong> json 的互转</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.2.3、map 和 json 的互转</span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Person<span class="token operator">></span> personMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"国哥好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"康师傅也好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把 map 集合转换成为 json 字符串 </span>String personMapJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personMap<span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMapJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Map&lt;Integer,Person> personMap2 = gson.fromJson(personMapJsonString, new PersonMapType().getType()); Map&lt;Integer,Person> personMap2 = gson.fromJson(personMapJsonString, new TypeToken&lt;HashMap&lt;Integer,Person>>(){}.getType()); </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMap2<span class="token punctuation">)</span><span class="token punctuation">;</span> Person p <span class="token operator">=</span> personMap2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="2-1、什么是-AJAX-请求"><a href="#2-1、什么是-AJAX-请求" class="headerlink" title="2.1、什么是 AJAX 请求"></a>2.1、什么是 <strong>AJAX</strong> <strong>请求</strong></h3><p>AJAX 即Asynchronous    JavascriptA<em>**nd</em> **XML（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发 </p><p>技术。</p><p>ajax 是一种浏览器通过 js 异步发起请求，局部更新页面的技术。 </p><p>Ajax 请求的局部更新，浏览器地址栏不会发生变化 </p><p>局部更新不会舍弃原来页面的内容</p><h3 id="2-2、原生AJAX请求的示例"><a href="#2-2、原生AJAX请求的示例" class="headerlink" title="2.2、原生AJAX请求的示例"></a>2.2、原生AJAX请求的示例</h3><h3 id="2-3-jquery中的AJAX请求"><a href="#2-3-jquery中的AJAX请求" class="headerlink" title="2.3  jquery中的AJAX请求"></a>2.3  jquery中的AJAX请求</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
