<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML</title>
      <link href="/2020/07/02/HC/"/>
      <url>/2020/07/02/HC/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><p>​                                                                                                                                                                                                                                       </p><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>在HTML中有些时候，我们不能直接书写一些特殊符号</p><p>比如：多个连续的空格，比如字母两侧的大于和小于号</p><p>如果我们需要在网页中书写这些特殊的符号，则需要使用html中的实体（转义字符）</p><p>​    实体的语法：</p><pre><code>  &amp;实体的名字：​        &amp;nbsp; 空格​        &amp;gt; 大于号​        &amp;lt; 小于号​        &amp;copy; 版权符号    </code></pre><p>​                                                                                               </p><h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h2><p> meta主要用于设置网页中的一些元数据，元数据不是给用户看</p><p>​      charset 指定网页的字符集</p><p>​      name 指定的数据的名称</p><p>​       content 指定的数据的内容</p><p>​         keywords 表示网站的关键字，可以同时指定多个关键字，关键字间使用,隔开</p><pre><code>                &lt;meta name="Keywords" content="网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东"/&gt;                &lt;meta name="keywords" content="网购,网上购物,在线购物,网购网站,网购商城,购物网站,网购中心,购物中心,卓越,亚马逊,卓越亚马逊,亚马逊中国,joyo,amazon"&gt;</code></pre><p>​          </p><p>​        description 用于指定网站的描述</p><pre><code>                &lt;meta name="description" content="京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!"/&gt;</code></pre><p>​       网站的描述会显示在搜索引擎的搜索的结果中</p><p>​        title标签的内容会作为搜索结果的超链接上的文字显示  </p><h2 id="语义化标签1"><a href="#语义化标签1" class="headerlink" title="语义化标签1"></a>语义化标签1</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--         在网页中HTML专门用来负责网页的结构            所以在使用html标签时，应该关注的是标签的语义，而不是它的样式            标题标签：                h1 ~ h6 一共有六级标题                从h1~h6重要性递减，h1最重要，h6最不重要                h1在网页中的重要性仅次于title标签，一般情况下一个页面中只会有一个h1                一般情况下标题标签只会使用到h1~h3，h4~h6很少用                标题标签都是块元素            在页面中独占一行的元素称为块元素（block element）     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>二级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>四级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>五级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>六级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--         hgroup标签用来为标题分组，可以将一组相关的标题同时放入到hgroup      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hgroup</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>回乡偶书二首<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>其一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hgroup</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--          p标签表示页面中的一个段落         p也是一个块元素      --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在p标签中的内容就表示一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在p标签中的内容就表示一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--           em标签用于表示语音语调的一个加重          在页面中不会独占一行的元素称为行内元素（inline element）       --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>今天天气<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>真<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>不错！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--           strong表示强调，重要内容！       --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你今天必须要<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>完成作业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      鲁迅说：      <span class="token comment" spellcheck="true">&lt;!-- blockquote 表示一个长引用 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">></span></span>          这句话我是从来没有说过的！      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--           q表示一个短引用       --></span>      子曰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span>学而时习之，乐呵乐呵！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--           br标签表示页面中的换行       --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      今天天气真不错</code></pre><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--         块元素（block element）            - 在网页中一般通过块元素来对页面进行布局        行内元素（inline element）            - 行内元素主要用来包裹文字            - 一般情况下会在块元素中放行内元素，而不会在行内元素中放块元素            - 块元素中基本上什么都能放            - p元素中不能放任何的块元素        浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正            比如：                标签写在了根元素的外部                p元素中嵌套了块元素                根元素中出现了除head和body以外的子元素                ... ...     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我就要写在html标签的外部！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--         布局标签（结构化语义标签）     --></span>     <span class="token comment" spellcheck="true">&lt;!--         header 表示网页的头部        main 表示网页的主体部分(一个页面中只会有一个main)        footer 表示网页的底部        nav 表示网页中的导航        aside 和主体相关的其他内容（侧边栏）        article 表示一个独立的文章        section 表示一个独立的区块，上边的标签都不能表示时使用section        div 没有语义，就用来表示一个区块，目前来讲div还是我们主要的布局元素        span 行内元素，没有任何的语义，一般用于在网页中选中文字      --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--     列表（list）        1、铅笔        2、尺子        3、橡皮    在html中也可以创建列表，html列表一共有三种：        1、有序列表        2、无序列表        3、定义列表    无序列表，使用ol标签来创建无序列表        使用li表示列表项      无序列表，使用ul标签来创建无序列表        使用li表示列表项    定义列表，使用dl标签来创建一个定义列表        使用dt来表示定义的内容        使用dd来对内容进行解释说明    列表之间可以互相嵌套 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            aa            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>aa-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>aa-2                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>aa-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>aa-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--         超链接可以让我们从一个页面跳转到其他页面，            或者是当前页面的其他的位置        使用 a 标签来定义超链接            属性：                href 指定跳转的目标路径                    - 值可以是一个外部网站的地址                    - 也可以写一个内部页面的地址        超链接是也是一个行内元素，在a标签中可以嵌套除它自身外的任何元素     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- &lt;a href="https://www.baidu123.com">超链接&lt;/a> --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>07.列表.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--         target属性，用来指定超链接打开的位置            可选值：                _self 默认值 在当前页面中打开超链接                _blank 在一个新的要么中打开超链接     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>07.列表.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去第三个自然段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。 这上面的夜的天空，奇怪而高，我生平没有见过这样奇怪而高的天空。他仿佛要离开人间而去，使人们仰面不再看见。然而现在却非常之蓝，闪闪地䀹着几十个星星的眼，冷眼。他的口角上现出微笑，似乎自以为大有深意，而将繁霜洒在我的园里的野花草上。 我不知道那些花草真叫什么名字，人们叫他们什么名字。我记得有一种开过极细小的粉红花，现在还开着，但是更极细小了，她在冷的夜气中，瑟缩地做梦，梦见春的到来，梦见秋的到来，梦见瘦的诗人将眼泪擦在她最末的花瓣上，告诉她秋虽然来，冬虽然来，而此后接着还是春，蝴蝶乱飞，蜜蜂都唱起春词来了。她于是一笑，虽然颜色冻得红惨惨地，仍然瑟缩着。 枣树，他们简直落尽了叶子。先前，还有一两个孩子来打他们，别人打剩的枣子，现在是一个也不剩了，连叶子也落尽了。他知道小粉红花的梦，秋后要有春；他也知道落叶的梦，春后还是秋。他简直落尽叶子，单剩干子，然而脱了当初满树是果实和叶子时候的弧形，欠伸得很舒服。但是，有几枝还低亚着，护定他从打枣的竿梢所得的皮伤，而最直最长的几枝，却已默默地铁似的直刺着奇怪而高的天空，使天空闪闪地鬼䀹眼；直刺着天空中圆满的月亮，使月亮窘得发白。 鬼䀹眼的天空越加非常之蓝，不安了，仿佛想离去人间，避开枣树，只将月亮剩下。然而月亮也暗暗地躲到东边去了。而一无所有的干子，却仍然默默地铁似的直刺着奇怪而高的天空，一意要制他的死命，不管他各式各样地䀹着许多蛊惑的眼睛。 哇的一声，夜游的恶鸟飞过了。 我忽而听到夜半的笑声，吃吃地，似乎不愿意惊动睡着的人，然而四围的空气都应和着笑。夜半，没有别的人，我即刻听出这声音就在我嘴里，我也即刻被这笑声所驱逐，回进自己的房。灯火的带子也即刻被我旋高了。 后窗的玻璃上丁丁地响，还有许多小飞虫乱撞。不多久，几个进来了，许是从窗纸的破孔进来的。他们一进来，又在玻璃的灯罩上撞得丁丁地响。一个从上面撞进去了，他于是遇到火，而且我以为这火是真的。两三个却休息在灯的纸罩上喘气。那罩是昨晚新换的罩，雪白的纸，折出波浪纹的叠痕，一角还画出一枝猩红色的栀子。 猩红的栀子开花时，枣树又要做小粉红花的梦，青葱地弯成弧形了……我又听到夜半的笑声；我赶紧砍断我的心绪，看那老在白纸罩上的小青虫，头大尾小，向日葵子似的，只有半粒小麦那么大，遍身的颜色苍翠得可爱，可怜。 我打一个呵欠，点起一支纸烟，喷出烟来，对着灯默默地敬奠这些苍翠精致的英雄们。 一九二四年九月十五日。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quia quasi numquam quam molestias cumque eveniet ab nobis doloribus dolores. Nesciunt, distinctio tempore similique consequuntur nulla dolorem sapiente minus praesentium impedit.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 在开发中可以将#作为超链接的路径的展位符使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个新的超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以使用 javascript:; 来作为href的属性，此时点击这个超链接什么也不会发生 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个新的超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--         可以直接将超链接的href属性设置为#，这样点击超链接以后            页面不会发生跳转，而是转到当前页面的顶部的位置        可以跳转到页面的指定位置，只需将href属性设置 #目标元素的id属性值        id属性（唯一不重复的）            - 每一个标签都可以添加一个id属性            - id属性就是元素的唯一标识，同一个页面中不能出现重复的id属性         --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--         当我们需要跳转一个服务器内部的页面时，一般我们都会使用相对路径            相对路径都会使用.或..开头                ./                ../            ./可以省略不写，如果不写./也不写../则就相当于写了./            ./ 表示当前文件所在的目录                - 在这里当前页面就是 09.相对路径.html                - ./就等于 09.相对路径.html 所在的目录 path            ../ 表示当前文件所在目录的上一级目录     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./target.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../07.列表.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./inner/target2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../outer/target3.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--         图片标签用于向当前页面中引入一个外部图片         使用img标签来引入外部图片，img标签是一个自结束标签         img这种元素属于替换元素（块和行内元素之间，具有两种元素的特点）         属性：            src 属性指定的是外部图片的路径（路径规则和超链接是一样的）            alt 图片的描述，这个描述默认情况下不会显示，有些浏览器会图片无法加载时显示                搜索引擎会根据alt中的内容来识别图片，如果不写alt属性则图片不会被搜索引擎所收录            width 图片的宽度 (单位是像素)            height 图片的高度                    - 宽度和高度中如果只修改了一个，则另一个会等比例缩放            注意：                一般情况在pc端，不建议修改图片的大小，需要多大的图片就裁多大                但是在移动端，经常需要对图片进行缩放（大图缩小）        图片的格式：            jpeg(jpg)                - 支持的颜色比较丰富，不支持透明效果，不支持动图                - 一般用来显示照片            gif                - 支持的颜色比较少，支持简单透明，支持动图                - 颜色单一的图片，动图            png                - 支持的颜色丰富，支持复杂透明，不支持动图                - 颜色丰富，复杂透明图片（专为网页而生）            webp                - 这种格式是谷歌新推出的专门用来表示网页中的图片的一种格式                - 它具备其他图片格式的所有优点，而且文件还特别的小                - 缺点：兼容性不好            base64                 - 将图片使用base64编码，这样可以将图片转换为字符，通过字符的形式来引入图片                    - 一般都是一些需要和网页一起加载的图片才会使用base64            效果一样，用小的            效果不一样，用效果好的     --></span></code></pre><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><p>​                                                                                                                                                                                                                                             </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo相关问题解决</title>
      <link href="/2020/06/13/mehe/"/>
      <url>/2020/06/13/mehe/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo相关问题解决"><a href="#hexo相关问题解决" class="headerlink" title="hexo相关问题解决"></a>hexo相关问题解决</h1><p>​                                                                                                                                                                                                                                      </p><h2 id="博客插入图片（hexo使用markdown图片无法显示问题）"><a href="#博客插入图片（hexo使用markdown图片无法显示问题）" class="headerlink" title="博客插入图片（hexo使用markdown图片无法显示问题）"></a>博客插入图片（hexo使用markdown图片无法显示问题）</h2><p><code>hexo</code>默认无法自动处理文章插入本地图片，需要通过扩展插件支持</p><p>安装<a href="https://github.com/7ym0n/hexo-asset-image.git" target="_blank" rel="noopener">hexo-asset-image</a>，运行<code>hexo n "xxxx"</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了xxxx.md文件还有一个同名的文件夹，把图片放入该文件夹。</p><p>使用<code>![xxx](xxx/xxx.png)</code>直接插入图片即可。</p><p>问题</p><p>由于hexo3版本后对很多插件支持有问题，<a href="https://github.com/CodeFalling/hexo-asset-image.git" target="_blank" rel="noopener">hexo-asset-image</a>插件在处理<code>data.permalink</code>链接时出现路径错误，把年月去掉了，导致最后生成的路径为<code>%d/xxx/xxx</code>需要对其做兼容处理。通过判断当前版本是否等于<code>3</code>的版本做不同的路径分割。</p><p>在代码中加入：</p><pre><code>var version = String(hexo.version).split('.');</code></pre><p>修改<code>date.permalink</code>处理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>     <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span>     <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>重新生成静态文件即可正确显示。</p><p>可直接安装已经修改过得插件<code>npm install https://github.com/7ym0n/hexo-asset-image --sa</code>。</p><p>作者：菜鸡_快递到了<br>链接：<a href="https://www.jianshu.com/p/3db6a61d3782" target="_blank" rel="noopener">https://www.jianshu.com/p/3db6a61d3782</a><br>来源：简书</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2020/06/13/java/"/>
      <url>/2020/06/13/java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>​                                                                                                                                                                                                                                                 </p><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="java学习导图"><a href="#java学习导图" class="headerlink" title="java学习导图"></a>java学习导图</h2><p><img src="/2020/06/13/java/1.jpg" alt="java"></p><h2 id="eclipse快捷键"><a href="#eclipse快捷键" class="headerlink" title="eclipse快捷键"></a>eclipse快捷键</h2><p><img src="/2020/06/13/java/2.jpg" alt="Eclipse快捷键"></p><h2 id="常见的Dos命令"><a href="#常见的Dos命令" class="headerlink" title="常见的Dos命令"></a>常见的Dos命令</h2><p><img src="/2020/06/13/java/3.jpg" alt="Dos命令"></p><h2 id="java语言的特点"><a href="#java语言的特点" class="headerlink" title="java语言的特点"></a>java语言的特点</h2><p>特性一：面向对象</p><p>​          <code>两个基本概念：类，对象</code></p><p>​          <code>三大特性：封装，继承，多态</code></p><p>特性二：健壮性</p><p>特性三：跨平台性</p><p>​          核心机制：jvm，垃圾收集机制</p><h2 id="java关键字和保留字"><a href="#java关键字和保留字" class="headerlink" title="java关键字和保留字"></a>java关键字和保留字</h2><p><img src="/2020/06/13/java/4.jpg" alt="关键字"></p><p><img src="/2020/06/13/java/5.jpg" alt="关键字"></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><img src="/2020/06/13/java/6.jpg" alt="标识符"></p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p><img src="/2020/06/13/java/7.jpg" alt="代码规范"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="/2020/06/13/java/8.jpg" alt="变量"></p><p>整数类型</p><p><img src="/2020/06/13/java/9.jpg" alt="整数类型"></p><p>浮点类型</p><p><img src="/2020/06/13/java/10.jpg" alt="浮点类型"></p><p>字符类型</p><p><img src="/2020/06/13/java/11.jpg" alt="字符类型"></p><p>类型转换</p><p><img src="/2020/06/13/java/12.jpg" alt="类型转换"></p><p>强制类型转换：自动类型提升运算的逆运算</p><p>1.需要使用强转符:()</p><p>2.注意点：强制类型转换，可能导致精度损失。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2020/06/13/javascript/"/>
      <url>/2020/06/13/javascript/</url>
      
        <content type="html"><![CDATA[<p>开发中                                                                                                                                                                                                                                </p><p>​                                                                                                                                                                                                                                             </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL启动问题解决</title>
      <link href="/2020/06/13/MySQL/"/>
      <url>/2020/06/13/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL启动错误相关解决"><a href="#MySQL启动错误相关解决" class="headerlink" title="MySQL启动错误相关解决"></a>MySQL启动错误相关解决</h1><p>​                                                                                                                                                                                                                                           </p><p>​               </p><h2 id="MySQL错误：2003-Can’t-connect-to-MySQL-server-on-‘localhost’-10061-“unknown-error”"><a href="#MySQL错误：2003-Can’t-connect-to-MySQL-server-on-‘localhost’-10061-“unknown-error”" class="headerlink" title="MySQL错误：2003-Can’t connect to MySQL server on ‘localhost’(10061 “unknown error”)"></a>MySQL错误：2003-Can’t connect to MySQL server on ‘localhost’(10061 “unknown error”)</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><p>​       开启本地的MySQL服务，这样很容易就可以解决这个问题了。如果这样无法解决问题您可以再尝试一下第二种解决方案。</p><p><img src="/2020/06/13/MySQL/1.jpg" alt="MySQL"></p><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p>第二种解决方案是后来想到会不会是因为每一次卸载的时候没有彻底卸载干净，然后就彻彻底底卸载干净了再重装，然后就成功了！因为上一次安装的数据库在C盘的配置文件还存在，对后面安装时的配置文件产生了冲突，所有导致了这个问题。话不多说，直接上干货！</p><p>　　1）删除程序。进入控制面板-&gt;在程序和功能选项卡中找到MySQL，右键卸载。</p><p>　　2）删除安装文件夹下的所有内容。找到MySQL的安装路径，然后删除路径下所有文件。</p><p>　　3）删除注册表。Windows+R打开运行命令框，输入regedit回车，删除以下3个地方的注册文件：</p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL 目录删除 </p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL 目录删除 </p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL 目录删除</p><p>　　4）最重要的一点（我就是由于没有删除此文件而导致出错的）：进入C盘，选中查看-&gt;勾选“隐藏的项目”，然后下面就出来隐藏目录（ProgramData）了，进入其中，删除MySQL文件夹。</p><p>　　到此，你需要做的就只是重装一遍就行了！　　<br>————————————————<br>版权声明：本文为CSDN博主「努力的凹凸曼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/py_123456/article/details/79694786" target="_blank" rel="noopener">https://blog.csdn.net/py_123456/article/details/79694786</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb</title>
      <link href="/2020/06/12/Javaweb/"/>
      <url>/2020/06/12/Javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p>​                                                                                                                                                                                                                                        </p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><p>1.先导入 JSTL jar包</p><pre><code> taglibs-standard-impl-1.2.1.jar  taglibs-standard-spec-1.2.1.jar</code></pre><p>2.使用taglib指令引入标签库</p><pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</code></pre><p>core核心库使用：</p><p>i.  ‘&lt;c:set&gt;’（使用很少）</p><p>作用：set 标签可以往域中保存数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>i<span class="token punctuation">.</span><span class="token operator">&lt;</span>c<span class="token punctuation">:</span><span class="token keyword">set</span> <span class="token operator">/</span><span class="token operator">></span>       作用：<span class="token keyword">set</span> 标签可以往域中保存数据       域对象<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>       scope 属性设置保存到哪个域       page 表示 PageContext 域（默认值）      request 表示 Request 域      session 表示 Session 域       application 表示 ServletContext 域       <span class="token keyword">var</span> 属性设置 key 是多少      value 属性设置值   <span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>   保存之前：$<span class="token punctuation">{</span> sessionScope<span class="token punctuation">.</span>abc <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">></span>   <span class="token operator">&lt;</span>c<span class="token punctuation">:</span><span class="token keyword">set</span> scope<span class="token operator">=</span><span class="token string">"session"</span> <span class="token keyword">var</span><span class="token operator">=</span><span class="token string">"abc"</span> value<span class="token operator">=</span><span class="token string">"abcValue"</span><span class="token operator">/</span><span class="token operator">></span>      保存之后：$<span class="token punctuation">{</span> sessionScope<span class="token punctuation">.</span>abc <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">></span></code></pre><p>ii.  <code>&lt;c:if/&gt;</code></p><pre><code>   if标签用来做if判断</code></pre><pre><code>&lt;%--       ii.&lt;c:if /&gt;          if 标签用来做 if 判断。           test 属性表示判断的条件（使用 EL 表达式输出） --%&gt;&lt;c:if test="${ 12 == 12 }"&gt;        &lt;h1&gt;12 等于 12&lt;/h1&gt;&lt;/c:if&gt;&lt;c:if test="${ 12 != 12 }"&gt;        &lt;h1&gt;12 不等于 12&lt;/h1&gt;&lt;/c:if&gt;</code></pre><p>iii.<code>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;</code>标签</p><pre><code>&lt;%-- iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签作用：多路判断。跟 switch ... case .... default 非常接近 choose 标签开始选择判断 when 标签表示每一种判断情况       test 属性表示当前这种判断情况的值 otherwise 标签表示剩下的情况 &lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：     1、标签里不能使用 html 注释，要使用 jsp 注释     2、when 标签的父标签一定要是 choose 标签 --%&gt; &lt;%      request.setAttribute("height", 180); %&gt;&lt;c:choose&gt; &lt;%-- 这是 html 注释 --%&gt; &lt;c:when test="${ requestScope.height &gt; 190 }"&gt;             &lt;h2&gt;小巨人&lt;/h2&gt; &lt;/c:when&gt; &lt;c:when test="${  requestScope.height &gt; 180 }"&gt;&lt;h2&gt;很高&lt;/h2&gt;&lt;/c:when&gt; &lt;c:when test="${ requestScope.height &gt; 170 }"&gt;&lt;h2&gt;还可以&lt;/h2&gt;&lt;/c:when&gt;&lt;c:otherwise&gt;     &lt;c:choose&gt;      &lt;c:when test="${requestScope.height &gt; 160}"&gt;      &lt;h3&gt;大于 160&lt;/h3&gt;      &lt;/c:when&gt;     &lt;c:when test="${requestScope.height &gt; 150}"&gt;      &lt;h3&gt;大于 150&lt;/h3&gt;      &lt;/c:when&gt;     &lt;c:when test="${requestScope.height &gt; 140}"&gt;     &lt;h3&gt;大于 140&lt;/h3&gt;     &lt;/c:when&gt;      &lt;c:otherwise&gt;     其他小于 140      &lt;/c:otherwise&gt;      &lt;/c:choose&gt;      &lt;/c:otherwise&gt;      &lt;/c:choose&gt;</code></pre><p>iv.<code>&lt;c:forEach /&gt;</code></p><p>作用：遍历输出使用。</p><p><strong>1.</strong> <strong>遍历</strong> <strong>1</strong> <strong>到</strong> 10，输出</p><pre><code>&lt;%--1.遍历 1 到 10，输出     begin 属性设置开始的索引    end 属性设置结束的索引     var 属性表示循环的变量(也是当前正在遍历到的数据)     for (int i = 1; i &lt; 10; i++)     --%&gt;     &lt;table border="1"&gt;     &lt;c:forEach begin="1" end="10" var="i"&gt;     &lt;tr&gt;    &lt;td&gt;    第${i}行    &lt;/td&gt;     &lt;/tr&gt;     &lt;/c:forEach&gt;     &lt;/table&gt;</code></pre><p><strong>2.</strong> <strong>遍历</strong> <strong>Object</strong> <strong>数组</strong> </p><pre><code>&lt;%-- 2.遍历 Object 数组        for (Object item: arr)       items 表示遍历的数据源（遍历的集合）       var 表示当前遍历到的数据        --%&gt;        &lt;%       request.setAttribute("arr", new String[]{"18610541354","18688886666","18699998888"});       %&gt;       &lt;c:forEach items="${ requestScope.arr }" var="item"&gt;        ${ item } &lt;br&gt;        &lt;/c:forEach&gt;</code></pre><p><strong>3.</strong> <strong>遍历</strong> <strong>Map</strong> <strong>集合</strong></p><pre><code>&lt;%** Map&lt;String,Object&gt; map = **new** HashMap&lt;String, Object&gt;(); map.put(**"key1"**, **"value1"**); map.put(**"key2"**, **"value2"**); map.put(**"key3"**, **"value3"**); *//* *for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {* *//* *}* request.setAttribute(**"map"**, map); **%&gt;**&lt;**c****:forEach** **items****="****${** requestScope.map **}****"** **var****="entry"**&gt; &lt;**h1**&gt;**${**entry.key**}** = **${**entry.value**}**&lt;/**h1**&gt; &lt;/**c****:forEach**&gt;</code></pre><p><strong>4.</strong> <strong>遍历</strong> <strong>List</strong> <strong>集合**</strong>—list** <strong>中存放</strong> <strong>Student</strong> <strong>类，有属性：编号，用户名，密码，年龄，</strong> </p><p><strong>电话信息</strong></p><pre class=" language-java"><code class="language-java">Student 类： <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">public</span> <span class="token keyword">class</span><span class="token operator">*</span><span class="token operator">*</span> Student <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">//4.**编号，用户名，密码，年龄，电话信息* </span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> Integer <span class="token operator">*</span><span class="token operator">*</span>id<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> String <span class="token operator">*</span><span class="token operator">*</span>username<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> String <span class="token operator">*</span><span class="token operator">*</span>password<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> Integer <span class="token operator">*</span><span class="token operator">*</span>age<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">private</span><span class="token operator">*</span><span class="token operator">*</span> String <span class="token operator">*</span><span class="token operator">*</span>phone<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--4.**遍历*</span> <span class="token attr-name">*List*</span> <span class="token attr-name">*集合**---list*</span> <span class="token attr-name">*中存放*</span> <span class="token attr-name">*Student*</span> <span class="token attr-name">*类，有属性：编号，用户名，密码，年龄，电话信息**--%</span><span class="token punctuation">></span></span>* **<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%**</span> <span class="token attr-name">List&lt;Student</span><span class="token punctuation">></span></span> studentList = **new** ArrayList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">></span></span>(); **for** (**int** i = 1; i &lt;= 10; i++) { studentList.add(**new** Student(i,**"username"**+i ,**"pass"**+i,18+i,**"phone"**+i)); }request.setAttribute(**"stus"**, studentList); **%>**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**tr**</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**th**</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**th**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**tr**</span><span class="token punctuation">></span></span> *&lt;%--**items* *表示遍历的集合* *var* *表示遍历到的数据* *begin* *表示遍历的开始索引值* *end* *表示结束的索引值* *step* *属性表示遍历的步长值* *varStatus* *属性表示当前遍历到的数据的状态* *for**（**int i = 1; i &lt; 10; i+=2**）* *--%>* &lt;**c****:forEach** **begin****="2"** **end****="7"** **step****="2"** **varStatus****="status"** **items****="****${**requestScope.stus**}****"** **var****="stu"**> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**tr**</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.id**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.username**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.password**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.age**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**stu.phone**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>**td**</span><span class="token punctuation">></span></span>**${**status.step**}**<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**td**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**tr**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">**c****:</span>forEach**</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>**table**</span><span class="token punctuation">></span></span></code></pre><h2 id="文件的上传"><a href="#文件的上传" class="headerlink" title="文件的上传"></a>文件的上传</h2><p>文件的上传和下载，是非常常见的功能，很多的系统中，或者软件中经常使用文件的上传和下载。</p><h3 id="1-文件的上传介绍"><a href="#1-文件的上传介绍" class="headerlink" title="1.文件的上传介绍"></a>1.文件的上传介绍</h3><p>1.要有一个form标签，method=post请求</p><p>2.form标签的encType属性值必须为multipart/form-data值</p><p>3.在form标签中只用input type=file添加上传的文件</p><p>4.编写服务器代码（servlet）接收，处理上传数据</p><p>encType=multipart/form-data 表示提交的数据，以多段的形式进行拼接。然后以二进制流的形式发送给服务器</p><img src="/2020/06/12/Javaweb/1.PNG" alt="Javawe" style="zoom:200%;"><p><strong>第一步，就是需要导入两个</strong> <strong>jar</strong> <strong>包：</strong> </p><p>commons-fileupload-1.2.1.jar </p><p>commons-io-1.4.jar</p><p><strong>commons-fileupload.jar</strong> <strong>和</strong> <strong>commons-io.jar</strong> <strong>包中，我们常用的类有哪些？</strong> </p><p>ServletFileUpload 类，用于解析上传的数据。 </p><p>FileItem 类，表示每一个表单项。 </p><pre><code>boolean ServletFileUpload.*isMultipartContent*(HttpServletRequest request); </code></pre><p>判断当前上传的数据格式是否是多段的格式。 </p><pre><code>public List&lt;FileItem&gt; parseRequest(HttpServletRequest request) </code></pre><p>解析上传的数据 </p><pre><code>boolean FileItem.isFormField() </code></pre><p>判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。 </p><p>true 表示普通类型的表单项 </p><p>false 表示上传的文件类型 </p><pre><code>String FileItem.getFieldName() </code></pre><p>获取表单项的 name 属性值</p><pre><code>String FileItem.getString() </code></pre><p>获取当前表单项的值。 </p><pre><code>String FileItem.getName(); </code></pre><p>获取上传的文件名 </p><pre><code>void FileItem.write( file ); </code></pre><p>将上传的文件写到 参数 file 所指向抽硬盘位置 。 </p><p>1.3、fileupload  类库的使用：</p><p>上传文件的表单：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.31.74:8080/09_EL_JSTL/uploadServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> 头像：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>解析上传的数据的代码： </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 用来处理上传的数据 * @param req * @param resp * @throws ServletException * @throws IOException */</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//1 先判断上传的数据是否多段数据（只有是多段的数据，才是文件上传的） </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ServletFileUpload<span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 创建 FileItemFactory 工厂实现类</span>              FileItemFactory fileItemFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建用于解析上传数据的工具类 ServletFileUpload 类 </span>         ServletFileUpload servletFileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>fileItemFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解析上传的数据，得到每一个表单项</span>   FileItem List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> list <span class="token operator">=</span> servletFileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 循环判断，每一个表单项，是普通类型，还是上传的文件</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem fileItem <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 普通表单项 </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表单项的 name 属性值："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数 UTF-8.解决乱码问题 System.out.println("表单项的 value 属性值：" + fileItem.getString("UTF-8")); } else { // 上传的文件 System.out.println("表单项的 name 属性值：" + fileItem.getFieldName()); </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传的文件名："</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fileItem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\"</span> <span class="token operator">+</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h2><p><strong>下载的常用</strong> <strong>API</strong> <strong>说明：</strong> </p><p>response.getOutputStream(); </p><p>servletContext.getResourceAsStream(); </p><p>servletContext.getMimeType(); </p><p>response.setContentType(); </p><p>response.setHeader(“Content-Disposition”, “attachment; fileName=1.jpg”); </p><p>这个响应头告诉浏览器。这是需要下载的。而 attachment 表示附件，也就是下载的一个文件。fileName=后面， </p><p>表示下载的文件名。 </p><p>完成上面的两个步骤，下载文件是没问题了。但是如果我们要下载的文件是中文名的话。你会发现，下载无法正确 </p><p>显示出正确的中文名。 </p><p>原因是在响应头中，不能包含有中文字符，只能包含 ASCII 码。文件下载示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 1、获取要下载的文件名 </span>String downloadFileName <span class="token operator">=</span> <span class="token string">"2.jpg"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2、读取要下载的文件内容 (通过 ServletContext 对象可以读取) </span>ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取要下载的文件类型</span>String mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载的文件类型："</span> <span class="token operator">+</span> mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4、在回传前，通过响应头告诉客户端返回的数据类型 </span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5、还要告诉客户端收到的数据是用于下载使用（还是使用响应头） </span><span class="token comment" spellcheck="true">// Content-Disposition 响应头，表示收到的数据怎么处理 </span><span class="token comment" spellcheck="true">// attachment 表示附件，表示下载使用 </span><span class="token comment" spellcheck="true">// filename= 表示指定下载的文件名 </span>resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*** /斜杠被服务器解析表示地址为 http://ip:prot/工程名/ 映射 到代码的 Web 目录 */</span> InputStream resourceAsStream <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/file/"</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取响应的输出流</span>OutputStream outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3、把下载的文件内容回传给客户端 // 读取输入流中全部的数据，复制给输出流，输出给客户端 IOUtils.copy(resourceAsStream,outputStream); }</span></code></pre><p><strong>附件中文名乱码问题解决方案：</strong> </p><p><strong>方案一：**</strong>URLEncoder** <strong>解决</strong> <strong>IE</strong> <strong>和谷歌浏览器的 附件中</strong> </p><p><strong>文名问题。</strong> </p><p>如果客户端浏览器是 IE 浏览器 或者 是谷歌浏览器。我们需要使用 URLEncoder 类先对中文名进行 UTF-8 的编码 </p><p>操作。</p><p>因为 IE 浏览器和谷歌浏览器收到含有编码后的字符串后会以 UTF-8 字符集进行解码显示。 </p><p>// 把中文名进行 UTF-8 编码操作。 </p><p>String str = “attachment; fileName=” + URLEncoder.<em>encode</em>(“中文.jpg”, “UTF-8”);// 然后把编码后的字符串设置到响应头中 </p><p>response.setHeader(“Content-Disposition”, str); </p><p>方案二：BASE64 <strong>编解码 解决 火狐浏览器的附件中文名问</strong> 题</p><p>如果客户端浏览器是火狐浏览器。 那么我们需要对中文名进行 BASE64 的编码操作。 </p><p>这时候需要把请求头 Content-Disposition: attachment; filename=中文名 </p><p>编码成为：Content-Disposition: attachment; filename==?charset?B?xxxxx?= </p><p>=?charset?B?xxxxx?= 现在我们对这段内容进行一下说明。 </p><p>=? </p><p>表示编码内容的开始 </p><p>charset </p><p>表示字符集 </p><p>B </p><p>表示 BASE64 编码 </p><p>xxxx </p><p>表示文件名 BASE64 编码后的内容 </p><p>?= </p><p>表示编码内容的结束 </p><p><strong>BASE64</strong> <strong>编解码操作：</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> String content <span class="token operator">=</span> <span class="token string">"这是需要 Base64 编码的内容"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个 Base64 编码器</span>BASE64Encoder base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行 Base64 编码操作 </span>String encodedString <span class="token operator">=</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> encodedString <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建 Base64 解码器 </span>BASE64Decoder base64Decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解码操作 byte[] bytes = base64Decoder.decodeBuffer(encodedString); </span>String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>因为火狐使用的是</strong> <strong>BASE64</strong> <strong>的编解码方式还原响应中的汉字。所以需要使用</strong> <strong>BASE64Encoder</strong> <strong>类进行编码操作</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用下面的格式进行 BASE64 编码后</span>String str <span class="token operator">=</span> <span class="token string">"attachment; fileName="</span> <span class="token operator">+</span> <span class="token string">"=?utf-8?B?"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"中文.jpg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置到响应头中 </span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么我们如何解决上面两种不同编解码方式呢。我们只需要通过判断请求头中 User-Agent 这个请求头携带过来的 </p><p>浏览器信息即可判断出是什么浏览器。 </p><p>如下： </p><pre class=" language-java"><code class="language-java">String ua <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否是火狐浏览器</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 使用下面的格式进行 BASE64 编码后 </span>String str <span class="token operator">=</span> <span class="token string">"attachment; fileName="</span> <span class="token operator">+</span> <span class="token string">"=?utf-8?B?"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"中文.jpg"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置到响应头中 </span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 把中文名进行 UTF-8 编码操作。</span>String str <span class="token operator">=</span> <span class="token string">"attachment; fileName="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"中文.jpg"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 然后把编码后的字符串设置到响应头中 </span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>1.cookie是服务器通知客户端保存键值对的一种技术</p><p>2.客户端有了cookie后，每次请求都发送给服务器</p><p>3.每个Cookie的大小不能超过4kb</p><h3 id="cookie的创建"><a href="#cookie的创建" class="headerlink" title="cookie的创建"></a>cookie的创建</h3><pre class=" language-java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createCookie</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//1.创建cookie对象</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//2.通知客户端保存Cookie</span>        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Cookie创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>乱码问题</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//解决post请求中文乱码问题</span>        <span class="token comment" spellcheck="true">//一定要在请求获取参数之前调用</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解决响应乱码前调用</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="cookie值得获取"><a href="#cookie值得获取" class="headerlink" title="cookie值得获取"></a>cookie值得获取</h3><p>工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Cookie <span class="token function">findCookie</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token operator">||</span>cookies <span class="token operator">==</span> null<span class="token operator">||</span>cookies<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> cookie<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>getcookie方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>         Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie iwantcookie <span class="token operator">=</span> CookieUtils<span class="token punctuation">.</span><span class="token function">findCookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>iwantcookie<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>              resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"摘到了"</span><span class="token operator">+</span>iwantcookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>iwantcookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span></code></pre><h3 id="cookie的修改"><a href="#cookie的修改" class="headerlink" title="cookie的修改"></a>cookie的修改</h3><p>方案一：</p><p>1.先创建一个要修改的同名的cookie对象</p><p>2.在构造器中，同时赋予新的cookie值。</p><p>3.调用response.addcookie(Cookie);</p><p>方案二</p><p>1.先查找到需要修改的cookie对象</p><p>2.调用setvalue方法赋予新的cookie值</p><p>3.调用resp.addcookie通知客户端保存修改</p><h3 id="Cookie的生命控制"><a href="#Cookie的生命控制" class="headerlink" title="Cookie的生命控制"></a>Cookie的生命控制</h3><p>Cookie的生命控制的是如何管理cookie什么时候被销毁（删除）</p><p>setMaxage（）</p><p>​          正数，表示在指定的秒数后过期</p><p>​          负数，表示浏览器一关，Cookie就会被删除（默认值是-1）</p><p>​           零，表示马上删除cookie</p><h3 id="Cookie有效路径的Path设置"><a href="#Cookie有效路径的Path设置" class="headerlink" title="Cookie有效路径的Path设置"></a>Cookie有效路径的Path设置</h3><p>Cookie的path属性可以有效过滤哪些cookie可以发送给服务器，那些不发</p><p>path属性是通过请求的地址来进行有效的过滤</p><p>cookieA     path=/工程路径</p><p>cookieB     path=/工程路径/abc</p><p>请求地址如下：</p><p>http：//ip:port/工程路径/a.html</p><p>​    cookieA   发送</p><p>   cookieB     不发送</p><p>http：//ip:port/工程路径/abc/a.html</p><p>   cookieA   发送</p><p>   cookieB   发送</p><p>Cookie练习</p><p>免输入用户登录 </p><h2 id="Session会话"><a href="#Session会话" class="headerlink" title="Session会话"></a>Session会话</h2><h3 id="什么是Session会话"><a href="#什么是Session会话" class="headerlink" title="什么是Session会话"></a>什么是Session会话</h3><p>1.Session是一个接口（HttpSession）</p><p>2.session就是会话，它是用来维护客户端和服务器关联的一种技术。</p><p>3.每个客户端都有一个自己的Session会话</p><p>4.Session会话中，我们经常用来保存登陆之后的信息</p><h3 id="如何创建Session和获取（id号，是否为新）"><a href="#如何创建Session和获取（id号，是否为新）" class="headerlink" title="如何创建Session和获取（id号，是否为新）"></a>如何创建Session和获取（id号，是否为新）</h3><p>  如何创建和获取session，他们的API是一样的</p><p>request.getSession()</p><p>​     第一次调用是：创建Session会话</p><p>​    之后调用都是：获取前面创建好的Session会话对象。</p><p>  isNew():判断到底是不是刚创建出来的（新的）</p><p>​           true  表示刚创建</p><p>​          false  表示获取之前创建</p><p>每个会话都有一个身份证号，也就是id值，而且这个id是唯一的。</p><p>get（）得到Session的会话id值</p><h3 id="Session域数据的获取"><a href="#Session域数据的获取" class="headerlink" title="Session域数据的获取"></a>Session域数据的获取</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     *往session中存入数据     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>          req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"已经往session中保存数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * session中获取数据     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Object key1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"从session中获取的session是"</span><span class="token operator">+</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Session生命周期控制"><a href="#Session生命周期控制" class="headerlink" title="Session生命周期控制"></a>Session生命周期控制</h3><p>​     public void setMAXinactiveInterval（int interval）设置Session的超时时间（以秒为单位），超过指定的时长。session就会被销毁。</p><p>​              值为正数的时候，设定Session的超时时长</p><p>​              值为负数的时候，表示Session永不超时（极少使用）</p><p>​     public  int getMaxInactiveInterval（）获取session的超时时间    </p><p>  public    void  invalidate（）让当前session会话马上超时无效</p><p>​       Session默认的超时时长为30分钟</p><p>因为在Tomcat服务器的配置文件web.xml中默认有以下</p><p>配置：它就表示配置了当前Tomcat服务器下所有的Session超时配置默认时长为：30分钟。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>session<span class="token operator">-</span>config<span class="token operator">></span>  <span class="token operator">&lt;</span>session<span class="token operator">-</span>timeout<span class="token operator">></span><span class="token number">30</span><span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>timeout<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>config<span class="token operator">></span></code></pre><p>如果说，你希望你的web工程，默认的session的超时时长为其他时长，你可以在你自己的web.xml配置文件中做以上相同的配置，就可以修改你的web工程所有Session的默认超时时长</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>表示当前web工程<span class="token punctuation">,</span>创建出来的所有Session默认是<span class="token number">20</span>分钟超时时长<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>session<span class="token operator">-</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span>session<span class="token operator">-</span>timeout<span class="token operator">></span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>timeout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>session<span class="token operator">-</span>config<span class="token operator">></span></code></pre><p>如果你想只修改个别Session的超时时长，就可以使用上面的API。 setMAXinactiveInterval（int interval）来进行单独的设置。</p><p>  session. setMAXinactiveInterval（int interval单独设置超时时长</p><p>session的超时概念介绍：</p><p><img src="/2020/06/12/Javaweb/2.png" alt="session超时"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">life3</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置Sessionn超时时长</span>        <span class="token comment" spellcheck="true">//获取当前Session对象</span>        HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置超时时长3秒</span>        session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前超时时长</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"当前超时时长"</span><span class="token operator">+</span>session<span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>浏览器和session之间关联的技术内幕</p><p>session技术，底层其实是基于cookie技术来实现的</p><p><img src="/2020/06/12/Javaweb/3.png" alt="浏览器和session关联的技术"></p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析 和生成。 它基于 JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999 的一 个子集。 JSON 采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。 这些特性使 JSON 成为理想的数据交换语言。</p><p>json 是一种轻量级的数据交换格式。 </p><p>轻量级指的是跟 xml 做比较。 </p><p>数据交换指的是客户端和服务器之间业务数据的传递格式</p><h3 id="Json在JavaScript中的使用"><a href="#Json在JavaScript中的使用" class="headerlink" title="Json在JavaScript中的使用"></a>Json在JavaScript中的使用</h3><p>json 是由键值对组成，并且由花括号（大括号）包围。每个键由引号引起来，键和值之间使用冒号进行分隔， </p><p>多组键值对之间进行逗号进行分隔。 </p><p>json 定义示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> jsonObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"key1"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"key4"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"arr"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"key5"</span><span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token string">"key5_1"</span> <span class="token punctuation">:</span> <span class="token number">551</span><span class="token punctuation">,</span> <span class="token string">"key5_2"</span> <span class="token punctuation">:</span> <span class="token string">"key5_2_value"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"key6"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">"key6_1_1"</span><span class="token punctuation">:</span><span class="token number">6611</span><span class="token punctuation">,</span> <span class="token string">"key6_1_2"</span><span class="token punctuation">:</span><span class="token string">"key6_1_2_value"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"key6_2_1"</span><span class="token punctuation">:</span><span class="token number">6621</span><span class="token punctuation">,</span> <span class="token string">"key6_2_2"</span><span class="token punctuation">:</span><span class="token string">"key6_2_2_value"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="json-的访问"><a href="#json-的访问" class="headerlink" title="json 的访问"></a>json 的访问</h3><p>json 本身是一个对象。 </p><p>json 中的 key 我们可以理解为是对象中的一个属性。 </p><p>json 中的 key 访问就跟访问对象的属性一样： json 对象.key </p><p>json 访问示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// object json 就是一个对象 alert(jsonObj.key1); //12 alert(jsonObj.key2); // abc alert(jsonObj.key3); // true alert(jsonObj.key4);// 得到数组[11,"arr",false] // json 中 数组值的遍历 for(var i = 0; i &lt; jsonObj.key4.length; i++) { alert(jsonObj.key4[i]); }alert(jsonObj.key5.key5_1);//551 alert(jsonObj.key5.key5_2);//key5_2_value alert( jsonObj.key6 );// 得到 json 数组 // 取出来每一个元素都是 json 对象 var jsonItem = jsonObj.key6[0]; // alert( jsonItem.key6_1_1 ); //6611 alert( jsonItem.key6_1_2 );</span></code></pre><h3 id="json-的两个常用方法"><a href="#json-的两个常用方法" class="headerlink" title="json 的两个常用方法"></a>json <strong>的两个常用方法</strong></h3><p>json 的存在有两种形式。 </p><p>一种是：对象的形式存在，我们叫它 json 对象。 </p><p>一种是：字符串的形式存在，我们叫它 json 字符串。 </p><p>一般我们要操作 json 中的数据的时候，需要 json 对象的格式。 </p><p>一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。 </p><p>JSON.stringify() </p><p>把 json 对象转换成为 json 字符串 </p><p>JSON.parse() </p><p>把 json 字符串转换成为 json 对象示例代码： </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 把 json 对象转换成为 json 字符串 </span><span class="token keyword">var</span> jsonObjString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 特别像 Java 中对象的 toString </span><span class="token function">alert</span><span class="token punctuation">(</span>jsonObjString<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把 json 字符串。转换成为 json 对象 </span><span class="token keyword">var</span> jsonObj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonObjString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>jsonObj2<span class="token punctuation">.</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 12 alert(jsonObj2.key2);// abc</span></code></pre><h3 id="JSON-在-java-中的使用"><a href="#JSON-在-java-中的使用" class="headerlink" title="JSON 在 java 中的使用"></a>JSON <strong>在</strong> <strong>java</strong> <strong>中的使用</strong></h3><h4 id="javaBean-和-json的互转"><a href="#javaBean-和-json的互转" class="headerlink" title="javaBean 和 json的互转"></a>javaBean 和 json的互转</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"国哥好帅!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建 Gson 对象实例 </span>Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// toJson 方法可以把 java 对象转换成为 json 字符串 String personJsonString = gson.toJson(person);</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fromJson 把 json 字符串转换回 Java 对象 </span><span class="token comment" spellcheck="true">// 第一个参数是 json 字符串 </span><span class="token comment" spellcheck="true">// 第二个参数是转换回去的 Java 对象类型 </span>Person person1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personJsonString<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> S</code></pre><h4 id="List-和-json-的互转"><a href="#List-和-json-的互转" class="headerlink" title="List 和 json 的互转"></a>List 和 <strong>json</strong> 的互转</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.2.2、List 和 json 的互转 </span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"国哥"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"康师傅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把 List 转换为 json 字符串 </span>String personListJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personList<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>personListJsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PersonListType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> Person person <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="map-和-json-的互转"><a href="#map-和-json-的互转" class="headerlink" title="map 和 json 的互转"></a>map <strong>和</strong> json 的互转</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.2.3、map 和 json 的互转</span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Person<span class="token operator">></span> personMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"国哥好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"康师傅也好帅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把 map 集合转换成为 json 字符串 </span>String personMapJsonString <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>personMap<span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMapJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Map&lt;Integer,Person> personMap2 = gson.fromJson(personMapJsonString, new PersonMapType().getType()); Map&lt;Integer,Person> personMap2 = gson.fromJson(personMapJsonString, new TypeToken&lt;HashMap&lt;Integer,Person>>(){}.getType()); </span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personMap2<span class="token punctuation">)</span><span class="token punctuation">;</span> Person p <span class="token operator">=</span> personMap2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="2-1、什么是-AJAX-请求"><a href="#2-1、什么是-AJAX-请求" class="headerlink" title="2.1、什么是 AJAX 请求"></a>2.1、什么是 <strong>AJAX</strong> <strong>请求</strong></h3><p>AJAX 即Asynchronous    JavascriptA<em>**nd</em> **XML（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发 </p><p>技术。</p><p>ajax 是一种浏览器通过 js 异步发起请求，局部更新页面的技术。 </p><p>Ajax 请求的局部更新，浏览器地址栏不会发生变化 </p><p>局部更新不会舍弃原来页面的内容</p><h3 id="2-2、原生AJAX请求的示例："><a href="#2-2、原生AJAX请求的示例：" class="headerlink" title="2.2、原生AJAX请求的示例："></a>2.2、原生AJAX请求的示例：</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
