<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo相关问题解决</title>
      <link href="/2020/06/13/mehe/"/>
      <url>/2020/06/13/mehe/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo相关问题解决"><a href="#hexo相关问题解决" class="headerlink" title="hexo相关问题解决"></a>hexo相关问题解决</h1><h2 id="博客插入图片（hexo使用markdown图片无法显示问题）"><a href="#博客插入图片（hexo使用markdown图片无法显示问题）" class="headerlink" title="博客插入图片（hexo使用markdown图片无法显示问题）"></a>博客插入图片（hexo使用markdown图片无法显示问题）</h2><p><code>hexo</code>默认无法自动处理文章插入本地图片，需要通过扩展插件支持</p><p>安装<a href="https://github.com/7ym0n/hexo-asset-image.git" target="_blank" rel="noopener">hexo-asset-image</a>，运行<code>hexo n "xxxx"</code>来生成md博文时，<code>/source/_posts</code>文件夹内除了xxxx.md文件还有一个同名的文件夹，把图片放入该文件夹。</p><p>使用<code>![xxx](xxx/xxx.png)</code>直接插入图片即可。</p><p>问题</p><p>由于hexo3版本后对很多插件支持有问题，<a href="https://github.com/CodeFalling/hexo-asset-image.git" target="_blank" rel="noopener">hexo-asset-image</a>插件在处理<code>data.permalink</code>链接时出现路径错误，把年月去掉了，导致最后生成的路径为<code>%d/xxx/xxx</code>需要对其做兼容处理。通过判断当前版本是否等于<code>3</code>的版本做不同的路径分割。</p><p>在代码中加入：</p><pre><code>var version = String(hexo.version).split('.');</code></pre><p>修改<code>date.permalink</code>处理：</p><pre><code>var link = data.permalink;  if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)     var beginPos = getPosition(link, '/', 1) + 1; else     var beginPos = getPosition(link, '/', 3) + 1;</code></pre><p>重新生成静态文件即可正确显示。</p><p>可直接安装已经修改过得插件<code>npm install https://github.com/7ym0n/hexo-asset-image --sa</code>。</p><p>作者：菜鸡_快递到了<br>链接：<a href="https://www.jianshu.com/p/3db6a61d3782" target="_blank" rel="noopener">https://www.jianshu.com/p/3db6a61d3782</a><br>来源：简书</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2020/06/13/java/"/>
      <url>/2020/06/13/java/</url>
      
        <content type="html"><![CDATA[<p>开发中。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2020/06/13/javascript/"/>
      <url>/2020/06/13/javascript/</url>
      
        <content type="html"><![CDATA[<p>开发中。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL启动问题解决</title>
      <link href="/2020/06/13/MySQL/"/>
      <url>/2020/06/13/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL启动错误相关解决："><a href="#MySQL启动错误相关解决：" class="headerlink" title="MySQL启动错误相关解决："></a>MySQL启动错误相关解决：</h1><h2 id="MySQL错误：2003-Can’t-connect-to-MySQL-server-on-‘localhost’-10061-“unknown-error”"><a href="#MySQL错误：2003-Can’t-connect-to-MySQL-server-on-‘localhost’-10061-“unknown-error”" class="headerlink" title="MySQL错误：2003-Can’t connect to MySQL server on ‘localhost’(10061 “unknown error”)"></a>MySQL错误：2003-Can’t connect to MySQL server on ‘localhost’(10061 “unknown error”)</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><p>​       开启本地的MySQL服务，这样很容易就可以解决这个问题了。如果这样无法解决问题您可以再尝试一下第二种解决方案。</p><p><img src="/2020/06/13/MySQL/1.jpg" alt="MySQL"></p><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p>第二种解决方案是后来想到会不会是因为每一次卸载的时候没有彻底卸载干净，然后就彻彻底底卸载干净了再重装，然后就成功了！因为上一次安装的数据库在C盘的配置文件还存在，对后面安装时的配置文件产生了冲突，所有导致了这个问题。话不多说，直接上干货！</p><p>　　1）删除程序。进入控制面板-&gt;在程序和功能选项卡中找到MySQL，右键卸载。</p><p>　　2）删除安装文件夹下的所有内容。找到MySQL的安装路径，然后删除路径下所有文件。</p><p>　　3）删除注册表。Windows+R打开运行命令框，输入regedit回车，删除以下3个地方的注册文件：</p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL 目录删除 </p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL 目录删除 </p><p>　　　　HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL 目录删除</p><p>　　4）最重要的一点（我就是由于没有删除此文件而导致出错的）：进入C盘，选中查看-&gt;勾选“隐藏的项目”，然后下面就出来隐藏目录（ProgramData）了，进入其中，删除MySQL文件夹。</p><p>　　到此，你需要做的就只是重装一遍就行了！　　<br>————————————————<br>版权声明：本文为CSDN博主「努力的凹凸曼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/py_123456/article/details/79694786" target="_blank" rel="noopener">https://blog.csdn.net/py_123456/article/details/79694786</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb</title>
      <link href="/2020/06/12/Javaweb/"/>
      <url>/2020/06/12/Javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><p>1.先导入 JSTL jar包</p><pre><code> taglibs-standard-impl-1.2.1.jar  taglibs-standard-spec-1.2.1.jar</code></pre><p>2.使用taglib指令引入标签库</p><pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</code></pre><p>core核心库使用：</p><p>i.  ‘&lt;c:set&gt;’（使用很少）</p><p>作用：set 标签可以往域中保存数据</p><pre><code>&lt;%--i.&lt;c:set /&gt;       作用：set 标签可以往域中保存数据       域对象.setAttribute(key,value);       scope 属性设置保存到哪个域       page 表示 PageContext 域（默认值）      request 表示 Request 域      session 表示 Session 域       application 表示 ServletContext 域       var 属性设置 key 是多少      value 属性设置值   --%&gt;   保存之前：${ sessionScope.abc } &lt;br&gt;   &lt;c:set scope="session" var="abc" value="abcValue"/&gt;      保存之后：${ sessionScope.abc } &lt;br&gt;</code></pre><p>ii.  <code>&lt;c:if/&gt;</code></p><pre><code>   if标签用来做if判断</code></pre><pre><code>&lt;%--       ii.&lt;c:if /&gt;          if 标签用来做 if 判断。           test 属性表示判断的条件（使用 EL 表达式输出） --%&gt;&lt;c:if test="${ 12 == 12 }"&gt;        &lt;h1&gt;12 等于 12&lt;/h1&gt;&lt;/c:if&gt;&lt;c:if test="${ 12 != 12 }"&gt;        &lt;h1&gt;12 不等于 12&lt;/h1&gt;&lt;/c:if&gt;</code></pre><p>iii.<code>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;</code>标签</p><pre><code>&lt;%-- iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签作用：多路判断。跟 switch ... case .... default 非常接近 choose 标签开始选择判断 when 标签表示每一种判断情况       test 属性表示当前这种判断情况的值 otherwise 标签表示剩下的情况 &lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：     1、标签里不能使用 html 注释，要使用 jsp 注释     2、when 标签的父标签一定要是 choose 标签 --%&gt; &lt;%      request.setAttribute("height", 180); %&gt;&lt;c:choose&gt; &lt;%-- 这是 html 注释 --%&gt; &lt;c:when test="${ requestScope.height &gt; 190 }"&gt;             &lt;h2&gt;小巨人&lt;/h2&gt; &lt;/c:when&gt; &lt;c:when test="${  requestScope.height &gt; 180 }"&gt;&lt;h2&gt;很高&lt;/h2&gt;&lt;/c:when&gt; &lt;c:when test="${ requestScope.height &gt; 170 }"&gt;&lt;h2&gt;还可以&lt;/h2&gt;&lt;/c:when&gt;&lt;c:otherwise&gt;     &lt;c:choose&gt;      &lt;c:when test="${requestScope.height &gt; 160}"&gt;      &lt;h3&gt;大于 160&lt;/h3&gt;      &lt;/c:when&gt;     &lt;c:when test="${requestScope.height &gt; 150}"&gt;      &lt;h3&gt;大于 150&lt;/h3&gt;      &lt;/c:when&gt;     &lt;c:when test="${requestScope.height &gt; 140}"&gt;     &lt;h3&gt;大于 140&lt;/h3&gt;     &lt;/c:when&gt;      &lt;c:otherwise&gt;     其他小于 140      &lt;/c:otherwise&gt;      &lt;/c:choose&gt;      &lt;/c:otherwise&gt;      &lt;/c:choose&gt;</code></pre><p>iv.<code>&lt;c:forEach /&gt;</code></p><p>作用：遍历输出使用。</p><p><strong>1.</strong> <strong>遍历</strong> <strong>1</strong> <strong>到</strong> 10，输出</p><pre><code>&lt;%--1.遍历 1 到 10，输出     begin 属性设置开始的索引    end 属性设置结束的索引     var 属性表示循环的变量(也是当前正在遍历到的数据)     for (int i = 1; i &lt; 10; i++)     --%&gt;     &lt;table border="1"&gt;     &lt;c:forEach begin="1" end="10" var="i"&gt;     &lt;tr&gt;    &lt;td&gt;    第${i}行    &lt;/td&gt;     &lt;/tr&gt;     &lt;/c:forEach&gt;     &lt;/table&gt;</code></pre><p><strong>2.</strong> <strong>遍历</strong> <strong>Object</strong> <strong>数组</strong> </p><pre><code>&lt;%-- 2.遍历 Object 数组        for (Object item: arr)       items 表示遍历的数据源（遍历的集合）       var 表示当前遍历到的数据        --%&gt;        &lt;%       request.setAttribute("arr", new String[]{"18610541354","18688886666","18699998888"});       %&gt;       &lt;c:forEach items="${ requestScope.arr }" var="item"&gt;        ${ item } &lt;br&gt;        &lt;/c:forEach&gt;</code></pre><p><strong>3.</strong> <strong>遍历</strong> <strong>Map</strong> <strong>集合</strong></p><pre><code>&lt;%** Map&lt;String,Object&gt; map = **new** HashMap&lt;String, Object&gt;(); map.put(**"key1"**, **"value1"**); map.put(**"key2"**, **"value2"**); map.put(**"key3"**, **"value3"**); *//* *for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {* *//* *}* request.setAttribute(**"map"**, map); **%&gt;**&lt;**c****:forEach** **items****="****${** requestScope.map **}****"** **var****="entry"**&gt; &lt;**h1**&gt;**${**entry.key**}** = **${**entry.value**}**&lt;/**h1**&gt; &lt;/**c****:forEach**&gt;</code></pre><p><strong>4.</strong> <strong>遍历</strong> <strong>List</strong> <strong>集合**</strong>—list** <strong>中存放</strong> <strong>Student</strong> <strong>类，有属性：编号，用户名，密码，年龄，</strong> </p><p><strong>电话信息</strong></p><pre><code>Student 类： **public class** Student { *//4.**编号，用户名，密码，年龄，电话信息* **private** Integer **id**; **private** String **username**; **private** String **password**; **private** Integer **age**; **private** String **phone**;</code></pre><pre><code>&lt;%--4.**遍历* *List* *集合**---list* *中存放* *Student* *类，有属性：编号，用户名，密码，年龄，电话信息**--%&gt;* **&lt;%** List&lt;Student&gt; studentList = **new** ArrayList&lt;Student&gt;(); **for** (**int** i = 1; i &lt;= 10; i++) { studentList.add(**new** Student(i,**"username"**+i ,**"pass"**+i,18+i,**"phone"**+i)); }request.setAttribute(**"stus"**, studentList); **%&gt;**&lt;table&gt; &lt;**tr**&gt;&lt;**th**&gt;编号&lt;/**th**&gt; &lt;**th**&gt;用户名&lt;/**th**&gt; &lt;**th**&gt;密码&lt;/**th**&gt; &lt;**th**&gt;年龄&lt;/**th**&gt; &lt;**th**&gt;电话&lt;/**th**&gt; &lt;**th**&gt;操作&lt;/**th**&gt; &lt;/**tr**&gt; *&lt;%--**items* *表示遍历的集合* *var* *表示遍历到的数据* *begin* *表示遍历的开始索引值* *end* *表示结束的索引值* *step* *属性表示遍历的步长值* *varStatus* *属性表示当前遍历到的数据的状态* *for**（**int i = 1; i &lt; 10; i+=2**）* *--%&gt;* &lt;**c****:forEach** **begin****="2"** **end****="7"** **step****="2"** **varStatus****="status"** **items****="****${**requestScope.stus**}****"** **var****="stu"**&gt; &lt;**tr**&gt;&lt;**td**&gt;**${**stu.id**}**&lt;/**td**&gt; &lt;**td**&gt;**${**stu.username**}**&lt;/**td**&gt; &lt;**td**&gt;**${**stu.password**}**&lt;/**td**&gt; &lt;**td**&gt;**${**stu.age**}**&lt;/**td**&gt; &lt;**td**&gt;**${**stu.phone**}**&lt;/**td**&gt; &lt;**td**&gt;**${**status.step**}**&lt;/**td**&gt; &lt;/**tr**&gt; &lt;/**c****:forEach**&gt; &lt;/**table**&gt;</code></pre><h2 id="文件的上传"><a href="#文件的上传" class="headerlink" title="文件的上传"></a>文件的上传</h2><h2 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
